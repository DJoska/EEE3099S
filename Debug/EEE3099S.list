
EEE3099S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000870  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000950  08000950  00010950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000954  08000954  00010954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000958  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000020  08000958  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010958  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001877  00000000  00000000  00010980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000005aa  00000000  00000000  000121f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000168  00000000  00000000  000127a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00012910  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000095c  00000000  00000000  00012a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000b54  00000000  00000000  0001339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00013ef0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000003ec  00000000  00000000  00013f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00014358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000918 	.word	0x08000918

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000918 	.word	0x08000918

08000108 <lcd_command>:
//                  - LINE_TWO:      Line 2
//
//====================================================================

void lcd_command(unsigned char command)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 8000114:	4b61      	ldr	r3, [pc, #388]	; (800029c <lcd_command+0x194>)
 8000116:	4a61      	ldr	r2, [pc, #388]	; (800029c <lcd_command+0x194>)
 8000118:	6992      	ldr	r2, [r2, #24]
 800011a:	2180      	movs	r1, #128	; 0x80
 800011c:	05c9      	lsls	r1, r1, #23
 800011e:	430a      	orrs	r2, r1
 8000120:	619a      	str	r2, [r3, #24]

// Put upper nibble (upper 4-bits) on data lines, command mode
// DATALINE 7
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 8000122:	1dfb      	adds	r3, r7, #7
 8000124:	781b      	ldrb	r3, [r3, #0]
 8000126:	b25b      	sxtb	r3, r3
 8000128:	2b00      	cmp	r3, #0
 800012a:	da09      	bge.n	8000140 <lcd_command+0x38>
    {
    	GPIOA->BSRR |= LCD_D7_SET;
 800012c:	2390      	movs	r3, #144	; 0x90
 800012e:	05db      	lsls	r3, r3, #23
 8000130:	2290      	movs	r2, #144	; 0x90
 8000132:	05d2      	lsls	r2, r2, #23
 8000134:	6992      	ldr	r2, [r2, #24]
 8000136:	2180      	movs	r1, #128	; 0x80
 8000138:	0209      	lsls	r1, r1, #8
 800013a:	430a      	orrs	r2, r1
 800013c:	619a      	str	r2, [r3, #24]
 800013e:	e008      	b.n	8000152 <lcd_command+0x4a>
    }
    else				// else RESET D7
    {
    	GPIOA->BSRR |= LCD_D7_RESET;
 8000140:	2390      	movs	r3, #144	; 0x90
 8000142:	05db      	lsls	r3, r3, #23
 8000144:	2290      	movs	r2, #144	; 0x90
 8000146:	05d2      	lsls	r2, r2, #23
 8000148:	6992      	ldr	r2, [r2, #24]
 800014a:	2180      	movs	r1, #128	; 0x80
 800014c:	0609      	lsls	r1, r1, #24
 800014e:	430a      	orrs	r2, r1
 8000150:	619a      	str	r2, [r3, #24]
    }
// DATALINE 6
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 8000152:	1dfb      	adds	r3, r7, #7
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	2240      	movs	r2, #64	; 0x40
 8000158:	4013      	ands	r3, r2
 800015a:	d009      	beq.n	8000170 <lcd_command+0x68>
    {
        GPIOA->BSRR |= LCD_D6_SET;
 800015c:	2390      	movs	r3, #144	; 0x90
 800015e:	05db      	lsls	r3, r3, #23
 8000160:	2290      	movs	r2, #144	; 0x90
 8000162:	05d2      	lsls	r2, r2, #23
 8000164:	6992      	ldr	r2, [r2, #24]
 8000166:	2180      	movs	r1, #128	; 0x80
 8000168:	0149      	lsls	r1, r1, #5
 800016a:	430a      	orrs	r2, r1
 800016c:	619a      	str	r2, [r3, #24]
 800016e:	e008      	b.n	8000182 <lcd_command+0x7a>
    }
    else				// else RESET D6
    {
        GPIOA->BSRR |= LCD_D6_RESET;
 8000170:	2390      	movs	r3, #144	; 0x90
 8000172:	05db      	lsls	r3, r3, #23
 8000174:	2290      	movs	r2, #144	; 0x90
 8000176:	05d2      	lsls	r2, r2, #23
 8000178:	6992      	ldr	r2, [r2, #24]
 800017a:	2180      	movs	r1, #128	; 0x80
 800017c:	0549      	lsls	r1, r1, #21
 800017e:	430a      	orrs	r2, r1
 8000180:	619a      	str	r2, [r3, #24]
    }
// DATALINE 5
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2220      	movs	r2, #32
 8000188:	4013      	ands	r3, r2
 800018a:	d007      	beq.n	800019c <lcd_command+0x94>
    {
    	GPIOB->BSRR |= LCD_D5_SET;	
 800018c:	4b44      	ldr	r3, [pc, #272]	; (80002a0 <lcd_command+0x198>)
 800018e:	4a44      	ldr	r2, [pc, #272]	; (80002a0 <lcd_command+0x198>)
 8000190:	6992      	ldr	r2, [r2, #24]
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	0089      	lsls	r1, r1, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	619a      	str	r2, [r3, #24]
 800019a:	e006      	b.n	80001aa <lcd_command+0xa2>
    }
    else				// else RESET D5
    {
    	GPIOB->BSRR |= LCD_D5_RESET;
 800019c:	4b40      	ldr	r3, [pc, #256]	; (80002a0 <lcd_command+0x198>)
 800019e:	4a40      	ldr	r2, [pc, #256]	; (80002a0 <lcd_command+0x198>)
 80001a0:	6992      	ldr	r2, [r2, #24]
 80001a2:	2180      	movs	r1, #128	; 0x80
 80001a4:	0489      	lsls	r1, r1, #18
 80001a6:	430a      	orrs	r2, r1
 80001a8:	619a      	str	r2, [r3, #24]
    }
// DATALINE 4
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 80001aa:	1dfb      	adds	r3, r7, #7
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2210      	movs	r2, #16
 80001b0:	4013      	ands	r3, r2
 80001b2:	d007      	beq.n	80001c4 <lcd_command+0xbc>
    {
    	GPIOB->BSRR |= LCD_D4_SET;
 80001b4:	4b3a      	ldr	r3, [pc, #232]	; (80002a0 <lcd_command+0x198>)
 80001b6:	4a3a      	ldr	r2, [pc, #232]	; (80002a0 <lcd_command+0x198>)
 80001b8:	6992      	ldr	r2, [r2, #24]
 80001ba:	2180      	movs	r1, #128	; 0x80
 80001bc:	0049      	lsls	r1, r1, #1
 80001be:	430a      	orrs	r2, r1
 80001c0:	619a      	str	r2, [r3, #24]
 80001c2:	e006      	b.n	80001d2 <lcd_command+0xca>
    }
    else				//  else RESET D4
    {
    	GPIOB->BSRR |= LCD_D4_RESET;
 80001c4:	4b36      	ldr	r3, [pc, #216]	; (80002a0 <lcd_command+0x198>)
 80001c6:	4a36      	ldr	r2, [pc, #216]	; (80002a0 <lcd_command+0x198>)
 80001c8:	6992      	ldr	r2, [r2, #24]
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	0449      	lsls	r1, r1, #17
 80001ce:	430a      	orrs	r2, r1
 80001d0:	619a      	str	r2, [r3, #24]
    }

    pulse_strobe ();			// Send data
 80001d2:	f000 f8b5 	bl	8000340 <pulse_strobe>

// lower nibble to data lines
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80001d6:	1dfb      	adds	r3, r7, #7
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2208      	movs	r2, #8
 80001dc:	4013      	ands	r3, r2
 80001de:	d009      	beq.n	80001f4 <lcd_command+0xec>
    {
    	GPIOA->BSRR |= LCD_D7_SET;
 80001e0:	2390      	movs	r3, #144	; 0x90
 80001e2:	05db      	lsls	r3, r3, #23
 80001e4:	2290      	movs	r2, #144	; 0x90
 80001e6:	05d2      	lsls	r2, r2, #23
 80001e8:	6992      	ldr	r2, [r2, #24]
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	0209      	lsls	r1, r1, #8
 80001ee:	430a      	orrs	r2, r1
 80001f0:	619a      	str	r2, [r3, #24]
 80001f2:	e008      	b.n	8000206 <lcd_command+0xfe>
    }
    else				// else RESET D7
    {
    	GPIOA->BSRR |= LCD_D7_RESET;
 80001f4:	2390      	movs	r3, #144	; 0x90
 80001f6:	05db      	lsls	r3, r3, #23
 80001f8:	2290      	movs	r2, #144	; 0x90
 80001fa:	05d2      	lsls	r2, r2, #23
 80001fc:	6992      	ldr	r2, [r2, #24]
 80001fe:	2180      	movs	r1, #128	; 0x80
 8000200:	0609      	lsls	r1, r1, #24
 8000202:	430a      	orrs	r2, r1
 8000204:	619a      	str	r2, [r3, #24]
    }
// DATALINE 6
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 8000206:	1dfb      	adds	r3, r7, #7
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2204      	movs	r2, #4
 800020c:	4013      	ands	r3, r2
 800020e:	d009      	beq.n	8000224 <lcd_command+0x11c>
    {
        GPIOA->BSRR |= LCD_D6_SET;
 8000210:	2390      	movs	r3, #144	; 0x90
 8000212:	05db      	lsls	r3, r3, #23
 8000214:	2290      	movs	r2, #144	; 0x90
 8000216:	05d2      	lsls	r2, r2, #23
 8000218:	6992      	ldr	r2, [r2, #24]
 800021a:	2180      	movs	r1, #128	; 0x80
 800021c:	0149      	lsls	r1, r1, #5
 800021e:	430a      	orrs	r2, r1
 8000220:	619a      	str	r2, [r3, #24]
 8000222:	e008      	b.n	8000236 <lcd_command+0x12e>
    }
    else				//  else RESET D6
    {
        GPIOA->BSRR |= LCD_D6_RESET;
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2290      	movs	r2, #144	; 0x90
 800022a:	05d2      	lsls	r2, r2, #23
 800022c:	6992      	ldr	r2, [r2, #24]
 800022e:	2180      	movs	r1, #128	; 0x80
 8000230:	0549      	lsls	r1, r1, #21
 8000232:	430a      	orrs	r2, r1
 8000234:	619a      	str	r2, [r3, #24]
    }
    // DATALINE 5
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2202      	movs	r2, #2
 800023c:	4013      	ands	r3, r2
 800023e:	d007      	beq.n	8000250 <lcd_command+0x148>
    {
    	GPIOB->BSRR |= LCD_D5_SET;         
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <lcd_command+0x198>)
 8000242:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <lcd_command+0x198>)
 8000244:	6992      	ldr	r2, [r2, #24]
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0089      	lsls	r1, r1, #2
 800024a:	430a      	orrs	r2, r1
 800024c:	619a      	str	r2, [r3, #24]
 800024e:	e006      	b.n	800025e <lcd_command+0x156>
    }
    else				//  else RESET D5
    {
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <lcd_command+0x198>)
 8000252:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <lcd_command+0x198>)
 8000254:	6992      	ldr	r2, [r2, #24]
 8000256:	2180      	movs	r1, #128	; 0x80
 8000258:	0489      	lsls	r1, r1, #18
 800025a:	430a      	orrs	r2, r1
 800025c:	619a      	str	r2, [r3, #24]
    }
    // DATALINE 4
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2201      	movs	r2, #1
 8000264:	4013      	ands	r3, r2
 8000266:	d007      	beq.n	8000278 <lcd_command+0x170>
    {
    	GPIOB->BSRR |= LCD_D4_SET;
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <lcd_command+0x198>)
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <lcd_command+0x198>)
 800026c:	6992      	ldr	r2, [r2, #24]
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	0049      	lsls	r1, r1, #1
 8000272:	430a      	orrs	r2, r1
 8000274:	619a      	str	r2, [r3, #24]
 8000276:	e006      	b.n	8000286 <lcd_command+0x17e>
    }
    else				//  else RESET D4
    {
    	GPIOB->BSRR |= LCD_D4_RESET;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <lcd_command+0x198>)
 800027a:	4a09      	ldr	r2, [pc, #36]	; (80002a0 <lcd_command+0x198>)
 800027c:	6992      	ldr	r2, [r2, #24]
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	0449      	lsls	r1, r1, #17
 8000282:	430a      	orrs	r2, r1
 8000284:	619a      	str	r2, [r3, #24]
    }

    pulse_strobe();			// Send data
 8000286:	f000 f85b 	bl	8000340 <pulse_strobe>
    delay(3000);
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <lcd_command+0x19c>)
 800028c:	0018      	movs	r0, r3
 800028e:	f000 f87d 	bl	800038c <delay>
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	48000800 	.word	0x48000800
 80002a0:	48000400 	.word	0x48000400
 80002a4:	00000bb8 	.word	0x00000bb8

080002a8 <init_LCD>:
//                - Two lines used
//                - Flashing cursor
//====================================================================

void init_LCD(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <init_LCD+0x88>)
 80002ae:	4a20      	ldr	r2, [pc, #128]	; (8000330 <init_LCD+0x88>)
 80002b0:	6952      	ldr	r2, [r2, #20]
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	0289      	lsls	r1, r1, #10
 80002b6:	430a      	orrs	r2, r1
 80002b8:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <init_LCD+0x88>)
 80002bc:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <init_LCD+0x88>)
 80002be:	6952      	ldr	r2, [r2, #20]
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	02c9      	lsls	r1, r1, #11
 80002c4:	430a      	orrs	r2, r1
 80002c6:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <init_LCD+0x88>)
 80002ca:	4a19      	ldr	r2, [pc, #100]	; (8000330 <init_LCD+0x88>)
 80002cc:	6952      	ldr	r2, [r2, #20]
 80002ce:	2180      	movs	r1, #128	; 0x80
 80002d0:	0309      	lsls	r1, r1, #12
 80002d2:	430a      	orrs	r2, r1
 80002d4:	615a      	str	r2, [r3, #20]

    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2290      	movs	r2, #144	; 0x90
 80002dc:	05d2      	lsls	r2, r2, #23
 80002de:	6812      	ldr	r2, [r2, #0]
 80002e0:	2182      	movs	r1, #130	; 0x82
 80002e2:	05c9      	lsls	r1, r1, #23
 80002e4:	430a      	orrs	r2, r1
 80002e6:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <init_LCD+0x8c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <init_LCD+0x8c>)
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	21a0      	movs	r1, #160	; 0xa0
 80002f0:	02c9      	lsls	r1, r1, #11
 80002f2:	430a      	orrs	r2, r1
 80002f4:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <init_LCD+0x90>)
 80002f8:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <init_LCD+0x90>)
 80002fa:	6812      	ldr	r2, [r2, #0]
 80002fc:	21a0      	movs	r1, #160	; 0xa0
 80002fe:	05c9      	lsls	r1, r1, #23
 8000300:	430a      	orrs	r2, r1
 8000302:	601a      	str	r2, [r3, #0]

    delay(30000);			// Allow the LCD some power up time (~30ms)
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <init_LCD+0x94>)
 8000306:	0018      	movs	r0, r3
 8000308:	f000 f840 	bl	800038c <delay>

    lcd_command(POWER_UP);		// Power up initialization for the lcd
 800030c:	2033      	movs	r0, #51	; 0x33
 800030e:	f7ff fefb 	bl	8000108 <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 8000312:	2032      	movs	r0, #50	; 0x32
 8000314:	f7ff fef8 	bl	8000108 <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 8000318:	200c      	movs	r0, #12
 800031a:	f7ff fef5 	bl	8000108 <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 800031e:	2028      	movs	r0, #40	; 0x28
 8000320:	f7ff fef2 	bl	8000108 <lcd_command>
    lcd_command(CLEAR);			// Clear display
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff feef 	bl	8000108 <lcd_command>
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	48000400 	.word	0x48000400
 8000338:	48000800 	.word	0x48000800
 800033c:	00007530 	.word	0x00007530

08000340 <pulse_strobe>:
//====================================================================
// DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
//====================================================================

void pulse_strobe(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    delay(20);				// Delay
 8000344:	2014      	movs	r0, #20
 8000346:	f000 f821 	bl	800038c <delay>

    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <pulse_strobe+0x48>)
 800034c:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <pulse_strobe+0x48>)
 800034e:	6992      	ldr	r2, [r2, #24]
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	0209      	lsls	r1, r1, #8
 8000354:	430a      	orrs	r2, r1
 8000356:	619a      	str	r2, [r3, #24]

    delay(20);				// Delay
 8000358:	2014      	movs	r0, #20
 800035a:	f000 f817 	bl	800038c <delay>

    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <pulse_strobe+0x48>)
 8000360:	4a09      	ldr	r2, [pc, #36]	; (8000388 <pulse_strobe+0x48>)
 8000362:	6992      	ldr	r2, [r2, #24]
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	0609      	lsls	r1, r1, #24
 8000368:	430a      	orrs	r2, r1
 800036a:	619a      	str	r2, [r3, #24]

    delay(20);				// Delay
 800036c:	2014      	movs	r0, #20
 800036e:	f000 f80d 	bl	800038c <delay>

    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <pulse_strobe+0x48>)
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <pulse_strobe+0x48>)
 8000376:	6992      	ldr	r2, [r2, #24]
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	0209      	lsls	r1, r1, #8
 800037c:	430a      	orrs	r2, r1
 800037e:	619a      	str	r2, [r3, #24]
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	48000800 	.word	0x48000800

0800038c <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	  volatile unsigned int counter;
	  microseconds *= 3;
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	0013      	movs	r3, r2
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	189b      	adds	r3, r3, r2
 800039c:	607b      	str	r3, [r7, #4]
	  for(counter = 0; counter<microseconds; counter++)
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e004      	b.n	80003ae <delay+0x22>
	  {
	    __asm("nop");
 80003a4:	46c0      	nop			; (mov r8, r8)
	    __asm("nop");
 80003a6:	46c0      	nop			; (mov r8, r8)
	  for(counter = 0; counter<microseconds; counter++)
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d3f6      	bcc.n	80003a4 <delay+0x18>
	  }
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b004      	add	sp, #16
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <main>:
void check_sensors(void);
//====================================================================
// MAIN FUNCTION
//====================================================================
void main (void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	init_GPIO();
 80003c4:	f000 f82c 	bl	8000420 <init_GPIO>
	init_ADC();
 80003c8:	f000 f91c 	bl	8000604 <init_ADC>
	init_PWM();
 80003cc:	f000 f976 	bl	80006bc <init_PWM>
	init_LCD();
 80003d0:	f7ff ff6a 	bl	80002a8 <init_LCD>
	GPIOB -> ODR = 0b0;
 80003d4:	4b02      	ldr	r3, [pc, #8]	; (80003e0 <main+0x20>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
	//init_EXTI();

	for(;;)
	{
		//get_moving();
		check_sensors();
 80003da:	f000 f873 	bl	80004c4 <check_sensors>
 80003de:	e7fc      	b.n	80003da <main+0x1a>
 80003e0:	48000400 	.word	0x48000400

080003e4 <EXTI2_3_IRQHandler>:
	NVIC_EnableIRQ(EXTI2_3_IRQn); // ENABLE LINE 2 & LINE 3 INTERRUPT
}


void EXTI2_3_IRQHandler (void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	EXTI -> PR |= EXTI_PR_PR3; // EXIT INTERRUPT
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <EXTI2_3_IRQHandler+0x30>)
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <EXTI2_3_IRQHandler+0x30>)
 80003ec:	6952      	ldr	r2, [r2, #20]
 80003ee:	2108      	movs	r1, #8
 80003f0:	430a      	orrs	r2, r1
 80003f2:	615a      	str	r2, [r3, #20]

	// User Interrupt Service Routine Here
	GPIOB -> ODR = 0b01000011;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <EXTI2_3_IRQHandler+0x34>)
 80003f6:	2243      	movs	r2, #67	; 0x43
 80003f8:	615a      	str	r2, [r3, #20]
	delay(100000);
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <EXTI2_3_IRQHandler+0x38>)
 80003fc:	0018      	movs	r0, r3
 80003fe:	f7ff ffc5 	bl	800038c <delay>
	GPIOB -> ODR = 0b0;
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI2_3_IRQHandler+0x34>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
	get_moving();
 8000408:	f000 f882 	bl	8000510 <get_moving>
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40010400 	.word	0x40010400
 8000418:	48000400 	.word	0x48000400
 800041c:	000186a0 	.word	0x000186a0

08000420 <init_GPIO>:

void init_GPIO(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;	//enable port a
 8000424:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <init_GPIO+0x98>)
 8000426:	4a24      	ldr	r2, [pc, #144]	; (80004b8 <init_GPIO+0x98>)
 8000428:	6952      	ldr	r2, [r2, #20]
 800042a:	2180      	movs	r1, #128	; 0x80
 800042c:	0289      	lsls	r1, r1, #10
 800042e:	430a      	orrs	r2, r1
 8000430:	615a      	str	r2, [r3, #20]
	RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;	//enable port b
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <init_GPIO+0x98>)
 8000434:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <init_GPIO+0x98>)
 8000436:	6952      	ldr	r2, [r2, #20]
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	02c9      	lsls	r1, r1, #11
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]

	//set pull-up resistors on ports A0-3
	GPIOA->PUPDR |= 0b01010101;
 8000440:	2390      	movs	r3, #144	; 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	2290      	movs	r2, #144	; 0x90
 8000446:	05d2      	lsls	r2, r2, #23
 8000448:	68d2      	ldr	r2, [r2, #12]
 800044a:	2155      	movs	r1, #85	; 0x55
 800044c:	430a      	orrs	r2, r1
 800044e:	60da      	str	r2, [r3, #12]

	GPIOA -> MODER |=0; //set all switches to inputs
 8000450:	2390      	movs	r3, #144	; 0x90
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	2290      	movs	r2, #144	; 0x90
 8000456:	05d2      	lsls	r2, r2, #23
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER1; //set PA1, analogue mode
 800045c:	2390      	movs	r3, #144	; 0x90
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2290      	movs	r2, #144	; 0x90
 8000462:	05d2      	lsls	r2, r2, #23
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	210c      	movs	r1, #12
 8000468:	430a      	orrs	r2, r1
 800046a:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER5; //set PA5, analogue mode
 800046c:	2390      	movs	r3, #144	; 0x90
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	2290      	movs	r2, #144	; 0x90
 8000472:	05d2      	lsls	r2, r2, #23
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	21c0      	movs	r1, #192	; 0xc0
 8000478:	0109      	lsls	r1, r1, #4
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER6; //set PA6, analogue mode
 800047e:	2390      	movs	r3, #144	; 0x90
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	2290      	movs	r2, #144	; 0x90
 8000484:	05d2      	lsls	r2, r2, #23
 8000486:	6812      	ldr	r2, [r2, #0]
 8000488:	21c0      	movs	r1, #192	; 0xc0
 800048a:	0189      	lsls	r1, r1, #6
 800048c:	430a      	orrs	r2, r1
 800048e:	601a      	str	r2, [r3, #0]

	RCC  ->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <init_GPIO+0x98>)
 8000492:	4a09      	ldr	r2, [pc, #36]	; (80004b8 <init_GPIO+0x98>)
 8000494:	6952      	ldr	r2, [r2, #20]
 8000496:	2180      	movs	r1, #128	; 0x80
 8000498:	02c9      	lsls	r1, r1, #11
 800049a:	430a      	orrs	r2, r1
 800049c:	615a      	str	r2, [r3, #20]
	GPIOB->MODER  |= (GPIO_MODER_MODER0_0 |
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <init_GPIO+0x9c>)
 80004a0:	4a06      	ldr	r2, [pc, #24]	; (80004bc <init_GPIO+0x9c>)
 80004a2:	6812      	ldr	r2, [r2, #0]
 80004a4:	4906      	ldr	r1, [pc, #24]	; (80004c0 <init_GPIO+0xa0>)
 80004a6:	430a      	orrs	r2, r1
 80004a8:	601a      	str	r2, [r3, #0]
						GPIO_MODER_MODER7_0|
						GPIO_MODER_MODER12_0|
						GPIO_MODER_MODER13_0|
						GPIO_MODER_MODER14_0|
						GPIO_MODER_MODER15_0);	//setting LEDs to output mode
	GPIOB->ODR = 0b0;
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <init_GPIO+0x9c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000400 	.word	0x48000400
 80004c0:	55005555 	.word	0x55005555

080004c4 <check_sensors>:
{
for(int i=0; i<1000; i++)
   for(int k=0; k<2000; k++);
}

void check_sensors(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	sensor1 = read_sensor(5);
 80004c8:	2005      	movs	r0, #5
 80004ca:	f000 f963 	bl	8000794 <read_sensor>
 80004ce:	0003      	movs	r3, r0
 80004d0:	001a      	movs	r2, r3
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <check_sensors+0x3c>)
 80004d4:	701a      	strb	r2, [r3, #0]
	sensor2 = read_sensor(6);
 80004d6:	2006      	movs	r0, #6
 80004d8:	f000 f95c 	bl	8000794 <read_sensor>
 80004dc:	0003      	movs	r3, r0
 80004de:	001a      	movs	r2, r3
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <check_sensors+0x40>)
 80004e2:	701a      	strb	r2, [r3, #0]
	sensor3 = read_sensor(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 f955 	bl	8000794 <read_sensor>
 80004ea:	0003      	movs	r3, r0
 80004ec:	001a      	movs	r2, r3
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <check_sensors+0x44>)
 80004f0:	701a      	strb	r2, [r3, #0]

	GPIOB -> ODR = sensor1;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <check_sensors+0x48>)
 80004f4:	4a02      	ldr	r2, [pc, #8]	; (8000500 <check_sensors+0x3c>)
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	615a      	str	r2, [r3, #20]
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000001d 	.word	0x2000001d
 8000504:	2000001e 	.word	0x2000001e
 8000508:	2000001c 	.word	0x2000001c
 800050c:	48000400 	.word	0x48000400

08000510 <get_moving>:

void get_moving(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

		sensor1 = read_sensor(5);
 8000514:	2005      	movs	r0, #5
 8000516:	f000 f93d 	bl	8000794 <read_sensor>
 800051a:	0003      	movs	r3, r0
 800051c:	001a      	movs	r2, r3
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <get_moving+0xdc>)
 8000520:	701a      	strb	r2, [r3, #0]
		sensor2 = read_sensor(6);
 8000522:	2006      	movs	r0, #6
 8000524:	f000 f936 	bl	8000794 <read_sensor>
 8000528:	0003      	movs	r3, r0
 800052a:	001a      	movs	r2, r3
 800052c:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <get_moving+0xe0>)
 800052e:	701a      	strb	r2, [r3, #0]
		sensor3 = read_sensor(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f000 f92f 	bl	8000794 <read_sensor>
 8000536:	0003      	movs	r3, r0
 8000538:	001a      	movs	r2, r3
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <get_moving+0xe4>)
 800053c:	701a      	strb	r2, [r3, #0]

		//TODO Try 5 as the threshold
		if(sensor2<2){
 800053e:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <get_moving+0xe0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d80d      	bhi.n	8000562 <get_moving+0x52>
			//move forward
			TIM2->CCR3 = 70*80;
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	22af      	movs	r2, #175	; 0xaf
 800054c:	0152      	lsls	r2, r2, #5
 800054e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 70*80;
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	22af      	movs	r2, #175	; 0xaf
 8000556:	0152      	lsls	r2, r2, #5
 8000558:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b1001000001000000;
 800055a:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <get_moving+0xe8>)
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <get_moving+0xec>)
 800055e:	615a      	str	r2, [r3, #20]
		}else{
			GPIOB -> ODR = 0b0;
		}


}//end get moving function
 8000560:	e041      	b.n	80005e6 <get_moving+0xd6>
		else if(sensor1<2){
 8000562:	4b22      	ldr	r3, [pc, #136]	; (80005ec <get_moving+0xdc>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d80d      	bhi.n	8000586 <get_moving+0x76>
			TIM2->CCR3 = 70*80;
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	22af      	movs	r2, #175	; 0xaf
 8000570:	0152      	lsls	r2, r2, #5
 8000572:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 70*80;
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	22af      	movs	r2, #175	; 0xaf
 800057a:	0152      	lsls	r2, r2, #5
 800057c:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b0101000001000000;
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <get_moving+0xe8>)
 8000580:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <get_moving+0xf0>)
 8000582:	615a      	str	r2, [r3, #20]
}//end get moving function
 8000584:	e02f      	b.n	80005e6 <get_moving+0xd6>
		}else if(sensor3<2){
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <get_moving+0xe4>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d80e      	bhi.n	80005ac <get_moving+0x9c>
			TIM2->CCR3 = 70*80;
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	22af      	movs	r2, #175	; 0xaf
 8000594:	0152      	lsls	r2, r2, #5
 8000596:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 70*80;
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	22af      	movs	r2, #175	; 0xaf
 800059e:	0152      	lsls	r2, r2, #5
 80005a0:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b1010000000000000;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <get_moving+0xe8>)
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	0212      	lsls	r2, r2, #8
 80005a8:	615a      	str	r2, [r3, #20]
}//end get moving function
 80005aa:	e01c      	b.n	80005e6 <get_moving+0xd6>
		}else if(sensor1>=2 && sensor2>=2 && sensor3>=2){
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <get_moving+0xdc>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d915      	bls.n	80005e0 <get_moving+0xd0>
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <get_moving+0xe0>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d911      	bls.n	80005e0 <get_moving+0xd0>
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <get_moving+0xe4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d90d      	bls.n	80005e0 <get_moving+0xd0>
			TIM2->CCR3 = 70*80;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	22af      	movs	r2, #175	; 0xaf
 80005ca:	0152      	lsls	r2, r2, #5
 80005cc:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 70*80;
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	22af      	movs	r2, #175	; 0xaf
 80005d4:	0152      	lsls	r2, r2, #5
 80005d6:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b0;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <get_moving+0xe8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
}//end get moving function
 80005de:	e002      	b.n	80005e6 <get_moving+0xd6>
			GPIOB -> ODR = 0b0;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <get_moving+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
}//end get moving function
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000001d 	.word	0x2000001d
 80005f0:	2000001e 	.word	0x2000001e
 80005f4:	2000001c 	.word	0x2000001c
 80005f8:	48000400 	.word	0x48000400
 80005fc:	00009040 	.word	0x00009040
 8000600:	00005040 	.word	0x00005040

08000604 <init_ADC>:
void turn_left(void){
	//set motors to turn left
}

// Initialise ADC
void init_ADC(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	//configure analogue pins for line sensors
	RCC -> APB2ENR |= RCC_APB2ENR_ADCEN; //enable clock for ADC
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <init_ADC+0x48>)
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <init_ADC+0x48>)
 800060c:	6992      	ldr	r2, [r2, #24]
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0089      	lsls	r1, r1, #2
 8000612:	430a      	orrs	r2, r1
 8000614:	619a      	str	r2, [r3, #24]
	ADC1 -> CR &= ~(ADC_CR_ADSTART);		//stop adc if running
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <init_ADC+0x4c>)
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <init_ADC+0x4c>)
 800061a:	6892      	ldr	r2, [r2, #8]
 800061c:	2104      	movs	r1, #4
 800061e:	438a      	bics	r2, r1
 8000620:	609a      	str	r2, [r3, #8]

	ADC1 -> CFGR1 |= ADC_CFGR1_RES_1; //8 bit resolution
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <init_ADC+0x4c>)
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <init_ADC+0x4c>)
 8000626:	68d2      	ldr	r2, [r2, #12]
 8000628:	2110      	movs	r1, #16
 800062a:	430a      	orrs	r2, r1
 800062c:	60da      	str	r2, [r3, #12]
	ADC1 -> CFGR1 &= ~ADC_CFGR1_ALIGN; //right align
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <init_ADC+0x4c>)
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <init_ADC+0x4c>)
 8000632:	68d2      	ldr	r2, [r2, #12]
 8000634:	2120      	movs	r1, #32
 8000636:	438a      	bics	r2, r1
 8000638:	60da      	str	r2, [r3, #12]
	ADC1 -> CFGR1 &= ~ADC_CFGR1_CONT; //single conversion mode
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <init_ADC+0x4c>)
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <init_ADC+0x4c>)
 800063e:	68d2      	ldr	r2, [r2, #12]
 8000640:	4904      	ldr	r1, [pc, #16]	; (8000654 <init_ADC+0x50>)
 8000642:	400a      	ands	r2, r1
 8000644:	60da      	str	r2, [r3, #12]

	//ADC1 -> CR |= ADC_CR_ADEN; //enable ADC
	//while((ADC1->ISR & ADC_ISR_ADRDY) == 0); //exits loop when ADRDY == 1
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	40012400 	.word	0x40012400
 8000654:	ffffdfff 	.word	0xffffdfff

08000658 <sampleADC>:

//Triggers and ADC conversion and returns sampled ADC value:
int sampleADC(int channel){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	ADC1 -> CHSELR &= 0b0;	//disable channel
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <sampleADC+0x60>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <sampleADC+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1 -> CHSELR |= channel;	//select channel 5
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <sampleADC+0x60>)
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <sampleADC+0x60>)
 800066e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	430a      	orrs	r2, r1
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1 -> CR |= ADC_CR_ADEN;				//set aden to 1 (on)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <sampleADC+0x60>)
 8000678:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <sampleADC+0x60>)
 800067a:	6892      	ldr	r2, [r2, #8]
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	609a      	str	r2, [r3, #8]
	while((ADC1 -> ISR & ADC_ISR_ADRDY) ==0);	//wait for RDY
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <sampleADC+0x60>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	4013      	ands	r3, r2
 800068c:	d0fa      	beq.n	8000684 <sampleADC+0x2c>

	ADC1 -> CR |= ADC_CR_ADSTART; //start ADC
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <sampleADC+0x60>)
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <sampleADC+0x60>)
 8000692:	6892      	ldr	r2, [r2, #8]
 8000694:	2104      	movs	r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	609a      	str	r2, [r3, #8]
	while((ADC1 -> ISR & ADC_ISR_EOC) ==0); //wait for end of conversion
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <sampleADC+0x60>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2204      	movs	r2, #4
 80006a2:	4013      	ands	r3, r2
 80006a4:	d0fa      	beq.n	800069c <sampleADC+0x44>
	int ADCval = ADC1 -> DR; //get adc value
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <sampleADC+0x60>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	60fb      	str	r3, [r7, #12]
	return (int)(ADCval);
 80006ac:	68fb      	ldr	r3, [r7, #12]
	ADC1 -> CHSELR &= 0b0;	//disable channel
}
 80006ae:	0018      	movs	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b004      	add	sp, #16
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40012400 	.word	0x40012400

080006bc <init_PWM>:

//Initialize PWM
void init_PWM(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <init_PWM+0xd0>)
 80006c2:	4a32      	ldr	r2, [pc, #200]	; (800078c <init_PWM+0xd0>)
 80006c4:	69d2      	ldr	r2, [r2, #28]
 80006c6:	2101      	movs	r1, #1
 80006c8:	430a      	orrs	r2, r1
 80006ca:	61da      	str	r2, [r3, #28]
	RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;
 80006cc:	4b2f      	ldr	r3, [pc, #188]	; (800078c <init_PWM+0xd0>)
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <init_PWM+0xd0>)
 80006d0:	6952      	ldr	r2, [r2, #20]
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	02c9      	lsls	r1, r1, #11
 80006d6:	430a      	orrs	r2, r1
 80006d8:	615a      	str	r2, [r3, #20]
	//configure PB3 and PB10 to alternate function mode
	GPIOB->MODER |= GPIO_MODER_MODER10_1; // PB10 = AF LEFT INPUT 1
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <init_PWM+0xd4>)
 80006dc:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <init_PWM+0xd4>)
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0389      	lsls	r1, r1, #14
 80006e4:	430a      	orrs	r2, r1
 80006e6:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER11_1; // PB11 = AF RIGHT INPUT 1
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <init_PWM+0xd4>)
 80006ea:	4a29      	ldr	r2, [pc, #164]	; (8000790 <init_PWM+0xd4>)
 80006ec:	6812      	ldr	r2, [r2, #0]
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	0409      	lsls	r1, r1, #16
 80006f2:	430a      	orrs	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[1] |=  (2 << (4*(10 - 8))); //map PB10 to TIM2 channel 3 using AF2 of AFRH
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <init_PWM+0xd4>)
 80006f8:	4a25      	ldr	r2, [pc, #148]	; (8000790 <init_PWM+0xd4>)
 80006fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0089      	lsls	r1, r1, #2
 8000700:	430a      	orrs	r2, r1
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |=(2 << (4*(11 - 8))); //map PB11 to TIM2 channel 2 using AF2 of AFRL
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <init_PWM+0xd4>)
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <init_PWM+0xd4>)
 8000708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	0189      	lsls	r1, r1, #6
 800070e:	430a      	orrs	r2, r1
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = 4000; // set ARR for approximately 1kHz PWM frequency
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	22fa      	movs	r2, #250	; 0xfa
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
	// set PWM mode 1 for both channels
	TIM2->CCMR2 |= (TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1); // PWM Mode 1 for PB10
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	05d2      	lsls	r2, r2, #23
 8000724:	69d2      	ldr	r2, [r2, #28]
 8000726:	2160      	movs	r1, #96	; 0x60
 8000728:	430a      	orrs	r2, r1
 800072a:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= (TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1);  // PWM Mode 1 for PB11
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	05d2      	lsls	r2, r2, #23
 8000734:	69d2      	ldr	r2, [r2, #28]
 8000736:	21c0      	movs	r1, #192	; 0xc0
 8000738:	01c9      	lsls	r1, r1, #7
 800073a:	430a      	orrs	r2, r1
 800073c:	61da      	str	r2, [r3, #28]
	TIM2->CCR3 = 20 * 80; // Duty Cycle for PB10 = 20%
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	22c8      	movs	r2, #200	; 0xc8
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 90 * 80; // Duty Cycle for PB11 = 90%
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	22e1      	movs	r2, #225	; 0xe1
 800074e:	0152      	lsls	r2, r2, #5
 8000750:	641a      	str	r2, [r3, #64]	; 0x40
	// enable output compare on channels 2 and 3 of TIM2
	TIM2->CCER |= TIM_CCER_CC3E;//PB10
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	05d2      	lsls	r2, r2, #23
 800075a:	6a12      	ldr	r2, [r2, #32]
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0049      	lsls	r1, r1, #1
 8000760:	430a      	orrs	r2, r1
 8000762:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= TIM_CCER_CC4E; //PB11
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	05d2      	lsls	r2, r2, #23
 800076c:	6a12      	ldr	r2, [r2, #32]
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	0149      	lsls	r1, r1, #5
 8000772:	430a      	orrs	r2, r1
 8000774:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= TIM_CR1_CEN; //start TIM2
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	05d2      	lsls	r2, r2, #23
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	601a      	str	r2, [r3, #0]
	}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <read_sensor>:

	//Takes in ADC channel to be converted (1,2,3,4,5,6). Corresponding channel is selected
	//and sampled. Sampled sensor value is returned. uint8_t return type is sufficient since
	//ADC is configured to 8 bit resolution
uint8_t read_sensor(int channel){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	int channel_bitmask;
	switch(channel){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b07      	cmp	r3, #7
 80007a0:	d817      	bhi.n	80007d2 <read_sensor+0x3e>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	009a      	lsls	r2, r3, #2
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <read_sensor+0x5c>)
 80007a8:	18d3      	adds	r3, r2, r3
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	469f      	mov	pc, r3
		case 1:
			channel_bitmask = ADC_CHSELR_CHSEL1; // Channel 1 (mapped to f sensor)
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]

			break;
 80007b2:	e00e      	b.n	80007d2 <read_sensor+0x3e>
		case 2:
			channel_bitmask = ADC_CHSELR_CHSEL2; // Channel 2 (mapped to mid_r sensor)
 80007b4:	2304      	movs	r3, #4
 80007b6:	60fb      	str	r3, [r7, #12]

			break;
 80007b8:	e00b      	b.n	80007d2 <read_sensor+0x3e>
		case 3:
			channel_bitmask = ADC_CHSELR_CHSEL3; // Channel 3 (mapped to mid_l sensor)
 80007ba:	2308      	movs	r3, #8
 80007bc:	60fb      	str	r3, [r7, #12]

			break;
 80007be:	e008      	b.n	80007d2 <read_sensor+0x3e>
		case 5:
			channel_bitmask = ADC_CHSELR_CHSEL5; // Channel 5 (mapped to c_r sensor)
 80007c0:	2320      	movs	r3, #32
 80007c2:	60fb      	str	r3, [r7, #12]

			break;
 80007c4:	e005      	b.n	80007d2 <read_sensor+0x3e>
		case 6:
			channel_bitmask = ADC_CHSELR_CHSEL6; // Channel 6 (mapped to c_l sensor)
 80007c6:	2340      	movs	r3, #64	; 0x40
 80007c8:	60fb      	str	r3, [r7, #12]
			break;
 80007ca:	e002      	b.n	80007d2 <read_sensor+0x3e>
		case 7:
			channel_bitmask = ADC_CHSELR_CHSEL7; // Channel 6 (mapped to c_l sensor)
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
			break;
 80007d0:	46c0      	nop			; (mov r8, r8)

}
	uint8_t val = (uint8_t)sampleADC(channel_bitmask);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff ff3f 	bl	8000658 <sampleADC>
 80007da:	0002      	movs	r2, r0
 80007dc:	230b      	movs	r3, #11
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	701a      	strb	r2, [r3, #0]
	return val;
 80007e2:	230b      	movs	r3, #11
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	781b      	ldrb	r3, [r3, #0]
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b004      	add	sp, #16
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08000930 	.word	0x08000930

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007fa:	e003      	b.n	8000804 <LoopCopyDataInit>

080007fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000800:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000802:	3104      	adds	r1, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <LoopForever+0xa>)
  ldr r3, =_edata
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <LoopForever+0xe>)
  adds r2, r0, r1
 8000808:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800080a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800080c:	d3f6      	bcc.n	80007fc <CopyDataInit>
  ldr r2, =_sbss
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <LoopForever+0x12>)
  b LoopFillZerobss
 8000810:	e002      	b.n	8000818 <LoopFillZerobss>

08000812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  str  r3, [r2]
 8000814:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000816:	3204      	adds	r2, #4

08000818 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <LoopForever+0x16>)
  cmp r2, r3
 800081a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800081c:	d3f9      	bcc.n	8000812 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800081e:	f000 f813 	bl	8000848 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000822:	f000 f855 	bl	80008d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fdcb 	bl	80003c0 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000830:	08000958 	.word	0x08000958
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000838:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 800083c:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 8000840:	20000020 	.word	0x20000020

08000844 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_COMP_IRQHandler>
	...

08000848 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <SystemInit+0x70>)
 800084e:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <SystemInit+0x70>)
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	2101      	movs	r1, #1
 8000854:	430a      	orrs	r2, r1
 8000856:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <SystemInit+0x70>)
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <SystemInit+0x70>)
 800085c:	6852      	ldr	r2, [r2, #4]
 800085e:	4917      	ldr	r1, [pc, #92]	; (80008bc <SystemInit+0x74>)
 8000860:	400a      	ands	r2, r1
 8000862:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <SystemInit+0x70>)
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <SystemInit+0x70>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	4915      	ldr	r1, [pc, #84]	; (80008c0 <SystemInit+0x78>)
 800086c:	400a      	ands	r2, r1
 800086e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <SystemInit+0x70>)
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <SystemInit+0x70>)
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	4913      	ldr	r1, [pc, #76]	; (80008c4 <SystemInit+0x7c>)
 8000878:	400a      	ands	r2, r1
 800087a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <SystemInit+0x70>)
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <SystemInit+0x70>)
 8000880:	6852      	ldr	r2, [r2, #4]
 8000882:	4911      	ldr	r1, [pc, #68]	; (80008c8 <SystemInit+0x80>)
 8000884:	400a      	ands	r2, r1
 8000886:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <SystemInit+0x70>)
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <SystemInit+0x70>)
 800088c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800088e:	210f      	movs	r1, #15
 8000890:	438a      	bics	r2, r1
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <SystemInit+0x70>)
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <SystemInit+0x70>)
 8000898:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800089a:	490c      	ldr	r1, [pc, #48]	; (80008cc <SystemInit+0x84>)
 800089c:	400a      	ands	r2, r1
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SystemInit+0x70>)
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <SystemInit+0x70>)
 80008a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80008a6:	2101      	movs	r1, #1
 80008a8:	438a      	bics	r2, r1
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <SystemInit+0x70>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	f8ffb80c 	.word	0xf8ffb80c
 80008c0:	fef6ffff 	.word	0xfef6ffff
 80008c4:	fffbffff 	.word	0xfffbffff
 80008c8:	ffc0ffff 	.word	0xffc0ffff
 80008cc:	fffffeac 	.word	0xfffffeac

080008d0 <__libc_init_array>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	2600      	movs	r6, #0
 80008d4:	4d0c      	ldr	r5, [pc, #48]	; (8000908 <__libc_init_array+0x38>)
 80008d6:	4c0d      	ldr	r4, [pc, #52]	; (800090c <__libc_init_array+0x3c>)
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	10a4      	asrs	r4, r4, #2
 80008dc:	42a6      	cmp	r6, r4
 80008de:	d109      	bne.n	80008f4 <__libc_init_array+0x24>
 80008e0:	2600      	movs	r6, #0
 80008e2:	f000 f819 	bl	8000918 <_init>
 80008e6:	4d0a      	ldr	r5, [pc, #40]	; (8000910 <__libc_init_array+0x40>)
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <__libc_init_array+0x44>)
 80008ea:	1b64      	subs	r4, r4, r5
 80008ec:	10a4      	asrs	r4, r4, #2
 80008ee:	42a6      	cmp	r6, r4
 80008f0:	d105      	bne.n	80008fe <__libc_init_array+0x2e>
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	00b3      	lsls	r3, r6, #2
 80008f6:	58eb      	ldr	r3, [r5, r3]
 80008f8:	4798      	blx	r3
 80008fa:	3601      	adds	r6, #1
 80008fc:	e7ee      	b.n	80008dc <__libc_init_array+0xc>
 80008fe:	00b3      	lsls	r3, r6, #2
 8000900:	58eb      	ldr	r3, [r5, r3]
 8000902:	4798      	blx	r3
 8000904:	3601      	adds	r6, #1
 8000906:	e7f2      	b.n	80008ee <__libc_init_array+0x1e>
 8000908:	08000950 	.word	0x08000950
 800090c:	08000950 	.word	0x08000950
 8000910:	08000950 	.word	0x08000950
 8000914:	08000954 	.word	0x08000954

08000918 <_init>:
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091e:	bc08      	pop	{r3}
 8000920:	469e      	mov	lr, r3
 8000922:	4770      	bx	lr

08000924 <_fini>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092a:	bc08      	pop	{r3}
 800092c:	469e      	mov	lr, r3
 800092e:	4770      	bx	lr

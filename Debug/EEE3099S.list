
EEE3099S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080010fc  080010fc  000110fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001100  08001100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000000  08001104  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000002c  08001104  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00011104  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002533  00000000  00000000  0001112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000080c  00000000  00000000  0001365f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001c8  00000000  00000000  00013e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00014038  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000c2d  00000000  00000000  000141b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c0e  00000000  00000000  00014de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000159f3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000056c  00000000  00000000  00015a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00015fdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080010a0 	.word	0x080010a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080010a0 	.word	0x080010a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <lcd_command>:
//                  - LINE_TWO:      Line 2
//
//====================================================================

void lcd_command(unsigned char command)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 8000400:	4b61      	ldr	r3, [pc, #388]	; (8000588 <lcd_command+0x194>)
 8000402:	4a61      	ldr	r2, [pc, #388]	; (8000588 <lcd_command+0x194>)
 8000404:	6992      	ldr	r2, [r2, #24]
 8000406:	2180      	movs	r1, #128	; 0x80
 8000408:	05c9      	lsls	r1, r1, #23
 800040a:	430a      	orrs	r2, r1
 800040c:	619a      	str	r2, [r3, #24]

// Put upper nibble (upper 4-bits) on data lines, command mode
// DATALINE 7
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b25b      	sxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	da09      	bge.n	800042c <lcd_command+0x38>
    {
    	GPIOA->BSRR |= LCD_D7_SET;
 8000418:	2390      	movs	r3, #144	; 0x90
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2290      	movs	r2, #144	; 0x90
 800041e:	05d2      	lsls	r2, r2, #23
 8000420:	6992      	ldr	r2, [r2, #24]
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	0209      	lsls	r1, r1, #8
 8000426:	430a      	orrs	r2, r1
 8000428:	619a      	str	r2, [r3, #24]
 800042a:	e008      	b.n	800043e <lcd_command+0x4a>
    }
    else				// else RESET D7
    {
    	GPIOA->BSRR |= LCD_D7_RESET;
 800042c:	2390      	movs	r3, #144	; 0x90
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2290      	movs	r2, #144	; 0x90
 8000432:	05d2      	lsls	r2, r2, #23
 8000434:	6992      	ldr	r2, [r2, #24]
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	0609      	lsls	r1, r1, #24
 800043a:	430a      	orrs	r2, r1
 800043c:	619a      	str	r2, [r3, #24]
    }
// DATALINE 6
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2240      	movs	r2, #64	; 0x40
 8000444:	4013      	ands	r3, r2
 8000446:	d009      	beq.n	800045c <lcd_command+0x68>
    {
        GPIOA->BSRR |= LCD_D6_SET;
 8000448:	2390      	movs	r3, #144	; 0x90
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	2290      	movs	r2, #144	; 0x90
 800044e:	05d2      	lsls	r2, r2, #23
 8000450:	6992      	ldr	r2, [r2, #24]
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0149      	lsls	r1, r1, #5
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	e008      	b.n	800046e <lcd_command+0x7a>
    }
    else				// else RESET D6
    {
        GPIOA->BSRR |= LCD_D6_RESET;
 800045c:	2390      	movs	r3, #144	; 0x90
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2290      	movs	r2, #144	; 0x90
 8000462:	05d2      	lsls	r2, r2, #23
 8000464:	6992      	ldr	r2, [r2, #24]
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	0549      	lsls	r1, r1, #21
 800046a:	430a      	orrs	r2, r1
 800046c:	619a      	str	r2, [r3, #24]
    }
// DATALINE 5
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2220      	movs	r2, #32
 8000474:	4013      	ands	r3, r2
 8000476:	d007      	beq.n	8000488 <lcd_command+0x94>
    {
    	GPIOB->BSRR |= LCD_D5_SET;	
 8000478:	4b44      	ldr	r3, [pc, #272]	; (800058c <lcd_command+0x198>)
 800047a:	4a44      	ldr	r2, [pc, #272]	; (800058c <lcd_command+0x198>)
 800047c:	6992      	ldr	r2, [r2, #24]
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	0089      	lsls	r1, r1, #2
 8000482:	430a      	orrs	r2, r1
 8000484:	619a      	str	r2, [r3, #24]
 8000486:	e006      	b.n	8000496 <lcd_command+0xa2>
    }
    else				// else RESET D5
    {
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000488:	4b40      	ldr	r3, [pc, #256]	; (800058c <lcd_command+0x198>)
 800048a:	4a40      	ldr	r2, [pc, #256]	; (800058c <lcd_command+0x198>)
 800048c:	6992      	ldr	r2, [r2, #24]
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0489      	lsls	r1, r1, #18
 8000492:	430a      	orrs	r2, r1
 8000494:	619a      	str	r2, [r3, #24]
    }
// DATALINE 4
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2210      	movs	r2, #16
 800049c:	4013      	ands	r3, r2
 800049e:	d007      	beq.n	80004b0 <lcd_command+0xbc>
    {
    	GPIOB->BSRR |= LCD_D4_SET;
 80004a0:	4b3a      	ldr	r3, [pc, #232]	; (800058c <lcd_command+0x198>)
 80004a2:	4a3a      	ldr	r2, [pc, #232]	; (800058c <lcd_command+0x198>)
 80004a4:	6992      	ldr	r2, [r2, #24]
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	0049      	lsls	r1, r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	619a      	str	r2, [r3, #24]
 80004ae:	e006      	b.n	80004be <lcd_command+0xca>
    }
    else				//  else RESET D4
    {
    	GPIOB->BSRR |= LCD_D4_RESET;
 80004b0:	4b36      	ldr	r3, [pc, #216]	; (800058c <lcd_command+0x198>)
 80004b2:	4a36      	ldr	r2, [pc, #216]	; (800058c <lcd_command+0x198>)
 80004b4:	6992      	ldr	r2, [r2, #24]
 80004b6:	2180      	movs	r1, #128	; 0x80
 80004b8:	0449      	lsls	r1, r1, #17
 80004ba:	430a      	orrs	r2, r1
 80004bc:	619a      	str	r2, [r3, #24]
    }

    pulse_strobe ();			// Send data
 80004be:	f000 f9a5 	bl	800080c <pulse_strobe>

// lower nibble to data lines
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2208      	movs	r2, #8
 80004c8:	4013      	ands	r3, r2
 80004ca:	d009      	beq.n	80004e0 <lcd_command+0xec>
    {
    	GPIOA->BSRR |= LCD_D7_SET;
 80004cc:	2390      	movs	r3, #144	; 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2290      	movs	r2, #144	; 0x90
 80004d2:	05d2      	lsls	r2, r2, #23
 80004d4:	6992      	ldr	r2, [r2, #24]
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0209      	lsls	r1, r1, #8
 80004da:	430a      	orrs	r2, r1
 80004dc:	619a      	str	r2, [r3, #24]
 80004de:	e008      	b.n	80004f2 <lcd_command+0xfe>
    }
    else				// else RESET D7
    {
    	GPIOA->BSRR |= LCD_D7_RESET;
 80004e0:	2390      	movs	r3, #144	; 0x90
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	2290      	movs	r2, #144	; 0x90
 80004e6:	05d2      	lsls	r2, r2, #23
 80004e8:	6992      	ldr	r2, [r2, #24]
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0609      	lsls	r1, r1, #24
 80004ee:	430a      	orrs	r2, r1
 80004f0:	619a      	str	r2, [r3, #24]
    }
// DATALINE 6
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2204      	movs	r2, #4
 80004f8:	4013      	ands	r3, r2
 80004fa:	d009      	beq.n	8000510 <lcd_command+0x11c>
    {
        GPIOA->BSRR |= LCD_D6_SET;
 80004fc:	2390      	movs	r3, #144	; 0x90
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	2290      	movs	r2, #144	; 0x90
 8000502:	05d2      	lsls	r2, r2, #23
 8000504:	6992      	ldr	r2, [r2, #24]
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0149      	lsls	r1, r1, #5
 800050a:	430a      	orrs	r2, r1
 800050c:	619a      	str	r2, [r3, #24]
 800050e:	e008      	b.n	8000522 <lcd_command+0x12e>
    }
    else				//  else RESET D6
    {
        GPIOA->BSRR |= LCD_D6_RESET;
 8000510:	2390      	movs	r3, #144	; 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2290      	movs	r2, #144	; 0x90
 8000516:	05d2      	lsls	r2, r2, #23
 8000518:	6992      	ldr	r2, [r2, #24]
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0549      	lsls	r1, r1, #21
 800051e:	430a      	orrs	r2, r1
 8000520:	619a      	str	r2, [r3, #24]
    }
    // DATALINE 5
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2202      	movs	r2, #2
 8000528:	4013      	ands	r3, r2
 800052a:	d007      	beq.n	800053c <lcd_command+0x148>
    {
    	GPIOB->BSRR |= LCD_D5_SET;         
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <lcd_command+0x198>)
 800052e:	4a17      	ldr	r2, [pc, #92]	; (800058c <lcd_command+0x198>)
 8000530:	6992      	ldr	r2, [r2, #24]
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0089      	lsls	r1, r1, #2
 8000536:	430a      	orrs	r2, r1
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	e006      	b.n	800054a <lcd_command+0x156>
    }
    else				//  else RESET D5
    {
    	GPIOB->BSRR |= LCD_D5_RESET;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <lcd_command+0x198>)
 800053e:	4a13      	ldr	r2, [pc, #76]	; (800058c <lcd_command+0x198>)
 8000540:	6992      	ldr	r2, [r2, #24]
 8000542:	2180      	movs	r1, #128	; 0x80
 8000544:	0489      	lsls	r1, r1, #18
 8000546:	430a      	orrs	r2, r1
 8000548:	619a      	str	r2, [r3, #24]
    }
    // DATALINE 4
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2201      	movs	r2, #1
 8000550:	4013      	ands	r3, r2
 8000552:	d007      	beq.n	8000564 <lcd_command+0x170>
    {
    	GPIOB->BSRR |= LCD_D4_SET;
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <lcd_command+0x198>)
 8000556:	4a0d      	ldr	r2, [pc, #52]	; (800058c <lcd_command+0x198>)
 8000558:	6992      	ldr	r2, [r2, #24]
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	0049      	lsls	r1, r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	e006      	b.n	8000572 <lcd_command+0x17e>
    }
    else				//  else RESET D4
    {
    	GPIOB->BSRR |= LCD_D4_RESET;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <lcd_command+0x198>)
 8000566:	4a09      	ldr	r2, [pc, #36]	; (800058c <lcd_command+0x198>)
 8000568:	6992      	ldr	r2, [r2, #24]
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0449      	lsls	r1, r1, #17
 800056e:	430a      	orrs	r2, r1
 8000570:	619a      	str	r2, [r3, #24]
    }

    pulse_strobe();			// Send data
 8000572:	f000 f94b 	bl	800080c <pulse_strobe>
    delay(3000);
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <lcd_command+0x19c>)
 8000578:	0018      	movs	r0, r3
 800057a:	f000 f96d 	bl	8000858 <delay>
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	48000800 	.word	0x48000800
 800058c:	48000400 	.word	0x48000400
 8000590:	00000bb8 	.word	0x00000bb8

08000594 <init_LCD>:
//                - Two lines used
//                - Flashing cursor
//====================================================================

void init_LCD(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <init_LCD+0x88>)
 800059a:	4a20      	ldr	r2, [pc, #128]	; (800061c <init_LCD+0x88>)
 800059c:	6952      	ldr	r2, [r2, #20]
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0289      	lsls	r1, r1, #10
 80005a2:	430a      	orrs	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <init_LCD+0x88>)
 80005a8:	4a1c      	ldr	r2, [pc, #112]	; (800061c <init_LCD+0x88>)
 80005aa:	6952      	ldr	r2, [r2, #20]
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	02c9      	lsls	r1, r1, #11
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <init_LCD+0x88>)
 80005b6:	4a19      	ldr	r2, [pc, #100]	; (800061c <init_LCD+0x88>)
 80005b8:	6952      	ldr	r2, [r2, #20]
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	0309      	lsls	r1, r1, #12
 80005be:	430a      	orrs	r2, r1
 80005c0:	615a      	str	r2, [r3, #20]

    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 80005c2:	2390      	movs	r3, #144	; 0x90
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2290      	movs	r2, #144	; 0x90
 80005c8:	05d2      	lsls	r2, r2, #23
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	2182      	movs	r1, #130	; 0x82
 80005ce:	05c9      	lsls	r1, r1, #23
 80005d0:	430a      	orrs	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <init_LCD+0x8c>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <init_LCD+0x8c>)
 80005d8:	6812      	ldr	r2, [r2, #0]
 80005da:	21a0      	movs	r1, #160	; 0xa0
 80005dc:	02c9      	lsls	r1, r1, #11
 80005de:	430a      	orrs	r2, r1
 80005e0:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <init_LCD+0x90>)
 80005e4:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <init_LCD+0x90>)
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	21a0      	movs	r1, #160	; 0xa0
 80005ea:	05c9      	lsls	r1, r1, #23
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]

    delay(30000);			// Allow the LCD some power up time (~30ms)
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <init_LCD+0x94>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f930 	bl	8000858 <delay>

    lcd_command(POWER_UP);		// Power up initialization for the lcd
 80005f8:	2033      	movs	r0, #51	; 0x33
 80005fa:	f7ff fefb 	bl	80003f4 <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f7ff fef8 	bl	80003f4 <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 8000604:	200c      	movs	r0, #12
 8000606:	f7ff fef5 	bl	80003f4 <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 800060a:	2028      	movs	r0, #40	; 0x28
 800060c:	f7ff fef2 	bl	80003f4 <lcd_command>
    lcd_command(CLEAR);			// Clear display
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff feef 	bl	80003f4 <lcd_command>
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	48000400 	.word	0x48000400
 8000624:	48000800 	.word	0x48000800
 8000628:	00007530 	.word	0x00007530

0800062c <lcd_putchar>:
//              Refer to the Hitachi HD44780 datasheet for full character
//              set information.
//====================================================================

 void lcd_putchar(unsigned char character)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	0002      	movs	r2, r0
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	701a      	strb	r2, [r3, #0]
	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 8000638:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <lcd_putchar+0x18c>)
 800063a:	4a5f      	ldr	r2, [pc, #380]	; (80007b8 <lcd_putchar+0x18c>)
 800063c:	6992      	ldr	r2, [r2, #24]
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	01c9      	lsls	r1, r1, #7
 8000642:	430a      	orrs	r2, r1
 8000644:	619a      	str	r2, [r3, #24]
// Put upper nibble (upper 4-bits) on data lines, command mode
// DATALINE 7
        if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	da09      	bge.n	8000664 <lcd_putchar+0x38>
        {
        	GPIOA->BSRR |= LCD_D7_SET;
 8000650:	2390      	movs	r3, #144	; 0x90
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	2290      	movs	r2, #144	; 0x90
 8000656:	05d2      	lsls	r2, r2, #23
 8000658:	6992      	ldr	r2, [r2, #24]
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	0209      	lsls	r1, r1, #8
 800065e:	430a      	orrs	r2, r1
 8000660:	619a      	str	r2, [r3, #24]
 8000662:	e008      	b.n	8000676 <lcd_putchar+0x4a>
        }
        else				//  else RESET D7
        {
        	GPIOA->BSRR |= LCD_D7_RESET;
 8000664:	2390      	movs	r3, #144	; 0x90
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	2290      	movs	r2, #144	; 0x90
 800066a:	05d2      	lsls	r2, r2, #23
 800066c:	6992      	ldr	r2, [r2, #24]
 800066e:	2180      	movs	r1, #128	; 0x80
 8000670:	0609      	lsls	r1, r1, #24
 8000672:	430a      	orrs	r2, r1
 8000674:	619a      	str	r2, [r3, #24]
        }
        // DATALINE 6
        if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)       
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2240      	movs	r2, #64	; 0x40
 800067c:	4013      	ands	r3, r2
 800067e:	d009      	beq.n	8000694 <lcd_putchar+0x68>
	{
            GPIOA->BSRR |= LCD_D6_SET;
 8000680:	2390      	movs	r3, #144	; 0x90
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	2290      	movs	r2, #144	; 0x90
 8000686:	05d2      	lsls	r2, r2, #23
 8000688:	6992      	ldr	r2, [r2, #24]
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	0149      	lsls	r1, r1, #5
 800068e:	430a      	orrs	r2, r1
 8000690:	619a      	str	r2, [r3, #24]
 8000692:	e008      	b.n	80006a6 <lcd_putchar+0x7a>
        }
        else				//  else RESET D6

        {
            GPIOA->BSRR |= LCD_D6_RESET;
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2290      	movs	r2, #144	; 0x90
 800069a:	05d2      	lsls	r2, r2, #23
 800069c:	6992      	ldr	r2, [r2, #24]
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0549      	lsls	r1, r1, #21
 80006a2:	430a      	orrs	r2, r1
 80006a4:	619a      	str	r2, [r3, #24]
        }
// DATALINE 5
        if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2220      	movs	r2, #32
 80006ac:	4013      	ands	r3, r2
 80006ae:	d007      	beq.n	80006c0 <lcd_putchar+0x94>

        {
        	GPIOB->BSRR |= LCD_D5_SET;                 
 80006b0:	4b42      	ldr	r3, [pc, #264]	; (80007bc <lcd_putchar+0x190>)
 80006b2:	4a42      	ldr	r2, [pc, #264]	; (80007bc <lcd_putchar+0x190>)
 80006b4:	6992      	ldr	r2, [r2, #24]
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	0089      	lsls	r1, r1, #2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	619a      	str	r2, [r3, #24]
 80006be:	e006      	b.n	80006ce <lcd_putchar+0xa2>
	}
        else				//  else RESET D5
        {
        	GPIOB->BSRR |= LCD_D5_RESET;
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <lcd_putchar+0x190>)
 80006c2:	4a3e      	ldr	r2, [pc, #248]	; (80007bc <lcd_putchar+0x190>)
 80006c4:	6992      	ldr	r2, [r2, #24]
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	0489      	lsls	r1, r1, #18
 80006ca:	430a      	orrs	r2, r1
 80006cc:	619a      	str	r2, [r3, #24]
        }
// DATALINE 4
        if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2210      	movs	r2, #16
 80006d4:	4013      	ands	r3, r2
 80006d6:	d007      	beq.n	80006e8 <lcd_putchar+0xbc>
        {
        	GPIOB->BSRR |= LCD_D4_SET;
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <lcd_putchar+0x190>)
 80006da:	4a38      	ldr	r2, [pc, #224]	; (80007bc <lcd_putchar+0x190>)
 80006dc:	6992      	ldr	r2, [r2, #24]
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	0049      	lsls	r1, r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	619a      	str	r2, [r3, #24]
 80006e6:	e006      	b.n	80006f6 <lcd_putchar+0xca>
        }
        else				// else RESET D4
        {
        	GPIOB->BSRR |= LCD_D4_RESET;
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <lcd_putchar+0x190>)
 80006ea:	4a34      	ldr	r2, [pc, #208]	; (80007bc <lcd_putchar+0x190>)
 80006ec:	6992      	ldr	r2, [r2, #24]
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	0449      	lsls	r1, r1, #17
 80006f2:	430a      	orrs	r2, r1
 80006f4:	619a      	str	r2, [r3, #24]
        }

        pulse_strobe ();		// Send data
 80006f6:	f000 f889 	bl	800080c <pulse_strobe>

// lower nibble to data lines
        if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2208      	movs	r2, #8
 8000700:	4013      	ands	r3, r2
 8000702:	d009      	beq.n	8000718 <lcd_putchar+0xec>
        {
        	GPIOA->BSRR |= LCD_D7_SET;
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	2290      	movs	r2, #144	; 0x90
 800070a:	05d2      	lsls	r2, r2, #23
 800070c:	6992      	ldr	r2, [r2, #24]
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	0209      	lsls	r1, r1, #8
 8000712:	430a      	orrs	r2, r1
 8000714:	619a      	str	r2, [r3, #24]
 8000716:	e008      	b.n	800072a <lcd_putchar+0xfe>
        }
        else				// else RESET D7
        {
        	GPIOA->BSRR |= LCD_D7_RESET;
 8000718:	2390      	movs	r3, #144	; 0x90
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2290      	movs	r2, #144	; 0x90
 800071e:	05d2      	lsls	r2, r2, #23
 8000720:	6992      	ldr	r2, [r2, #24]
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	0609      	lsls	r1, r1, #24
 8000726:	430a      	orrs	r2, r1
 8000728:	619a      	str	r2, [r3, #24]
        }
// DATALINE 6
        if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)         
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2204      	movs	r2, #4
 8000730:	4013      	ands	r3, r2
 8000732:	d009      	beq.n	8000748 <lcd_putchar+0x11c>
	{
            GPIOA->BSRR |= LCD_D6_SET;
 8000734:	2390      	movs	r3, #144	; 0x90
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2290      	movs	r2, #144	; 0x90
 800073a:	05d2      	lsls	r2, r2, #23
 800073c:	6992      	ldr	r2, [r2, #24]
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	0149      	lsls	r1, r1, #5
 8000742:	430a      	orrs	r2, r1
 8000744:	619a      	str	r2, [r3, #24]
 8000746:	e008      	b.n	800075a <lcd_putchar+0x12e>
        }
        else				// else RESET D6

        {
            GPIOA->BSRR |= LCD_D6_RESET;
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2290      	movs	r2, #144	; 0x90
 800074e:	05d2      	lsls	r2, r2, #23
 8000750:	6992      	ldr	r2, [r2, #24]
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	0549      	lsls	r1, r1, #21
 8000756:	430a      	orrs	r2, r1
 8000758:	619a      	str	r2, [r3, #24]
        }
// DATALINE 5
        if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2202      	movs	r2, #2
 8000760:	4013      	ands	r3, r2
 8000762:	d007      	beq.n	8000774 <lcd_putchar+0x148>
        {
        	GPIOB->BSRR |= LCD_D5_SET;       
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <lcd_putchar+0x190>)
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <lcd_putchar+0x190>)
 8000768:	6992      	ldr	r2, [r2, #24]
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	0089      	lsls	r1, r1, #2
 800076e:	430a      	orrs	r2, r1
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	e006      	b.n	8000782 <lcd_putchar+0x156>
	}
        else				// else RESET D5
        {
        	GPIOB->BSRR |= LCD_D5_RESET;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <lcd_putchar+0x190>)
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <lcd_putchar+0x190>)
 8000778:	6992      	ldr	r2, [r2, #24]
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	0489      	lsls	r1, r1, #18
 800077e:	430a      	orrs	r2, r1
 8000780:	619a      	str	r2, [r3, #24]
        }
// DATALINE 4
        if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	d007      	beq.n	800079c <lcd_putchar+0x170>
        {
        	GPIOB->BSRR |= LCD_D4_SET;
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <lcd_putchar+0x190>)
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <lcd_putchar+0x190>)
 8000790:	6992      	ldr	r2, [r2, #24]
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	0049      	lsls	r1, r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	619a      	str	r2, [r3, #24]
 800079a:	e006      	b.n	80007aa <lcd_putchar+0x17e>
        }
        else				//  else RESET D4
        {
        	GPIOB->BSRR |= LCD_D4_RESET;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <lcd_putchar+0x190>)
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <lcd_putchar+0x190>)
 80007a0:	6992      	ldr	r2, [r2, #24]
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	0449      	lsls	r1, r1, #17
 80007a6:	430a      	orrs	r2, r1
 80007a8:	619a      	str	r2, [r3, #24]
        }

        pulse_strobe();			// Send data
 80007aa:	f000 f82f 	bl	800080c <pulse_strobe>
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	48000800 	.word	0x48000800
 80007bc:	48000400 	.word	0x48000400

080007c0 <lcd_putstring>:
//====================================================================
// DESCRIPTION: Writes a string to the LCD
//====================================================================

void lcd_putstring(char *instring)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    unsigned char count = 0;
 80007c8:	230f      	movs	r3, #15
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]

    while (instring[count])		// Until the null terminator is reached
 80007d0:	e00f      	b.n	80007f2 <lcd_putstring+0x32>
    {
    	lcd_putchar(instring[count]);	// Write each character to LCD
 80007d2:	230f      	movs	r3, #15
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	18d3      	adds	r3, r2, r3
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff ff24 	bl	800062c <lcd_putchar>
	    count++;
 80007e4:	230f      	movs	r3, #15
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	230f      	movs	r3, #15
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	3201      	adds	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
    while (instring[count])		// Until the null terminator is reached
 80007f2:	230f      	movs	r3, #15
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	18d3      	adds	r3, r2, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1e7      	bne.n	80007d2 <lcd_putstring+0x12>
	 }
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <pulse_strobe>:
//====================================================================
// DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
//====================================================================

void pulse_strobe(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    delay(20);				// Delay
 8000810:	2014      	movs	r0, #20
 8000812:	f000 f821 	bl	8000858 <delay>

    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <pulse_strobe+0x48>)
 8000818:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <pulse_strobe+0x48>)
 800081a:	6992      	ldr	r2, [r2, #24]
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0209      	lsls	r1, r1, #8
 8000820:	430a      	orrs	r2, r1
 8000822:	619a      	str	r2, [r3, #24]

    delay(20);				// Delay
 8000824:	2014      	movs	r0, #20
 8000826:	f000 f817 	bl	8000858 <delay>

    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <pulse_strobe+0x48>)
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <pulse_strobe+0x48>)
 800082e:	6992      	ldr	r2, [r2, #24]
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0609      	lsls	r1, r1, #24
 8000834:	430a      	orrs	r2, r1
 8000836:	619a      	str	r2, [r3, #24]

    delay(20);				// Delay
 8000838:	2014      	movs	r0, #20
 800083a:	f000 f80d 	bl	8000858 <delay>

    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <pulse_strobe+0x48>)
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <pulse_strobe+0x48>)
 8000842:	6992      	ldr	r2, [r2, #24]
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0209      	lsls	r1, r1, #8
 8000848:	430a      	orrs	r2, r1
 800084a:	619a      	str	r2, [r3, #24]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	48000800 	.word	0x48000800

08000858 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	  volatile unsigned int counter;
	  microseconds *= 3;
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	0013      	movs	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	189b      	adds	r3, r3, r2
 8000868:	607b      	str	r3, [r7, #4]
	  for(counter = 0; counter<microseconds; counter++)
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e004      	b.n	800087a <delay+0x22>
	  {
	    __asm("nop");
 8000870:	46c0      	nop			; (mov r8, r8)
	    __asm("nop");
 8000872:	46c0      	nop			; (mov r8, r8)
	  for(counter = 0; counter<microseconds; counter++)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3301      	adds	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	429a      	cmp	r2, r3
 8000880:	d3f6      	bcc.n	8000870 <delay+0x18>
	  }
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b004      	add	sp, #16
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <main>:
void check_sensors(void);
//====================================================================
// MAIN FUNCTION
//====================================================================
void main (void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	init_GPIO();
 8000890:	f000 f82c 	bl	80008ec <init_GPIO>
	init_ADC();
 8000894:	f000 f96a 	bl	8000b6c <init_ADC>
	init_PWM();
 8000898:	f000 f9ce 	bl	8000c38 <init_PWM>
	init_LCD();
 800089c:	f7ff fe7a 	bl	8000594 <init_LCD>
	GPIOB -> ODR = 0b0;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <main+0x20>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
	//init_EXTI();

	for(;;)
	{
		//get_moving();
		check_sensors();
 80008a6:	f000 f895 	bl	80009d4 <check_sensors>
 80008aa:	e7fc      	b.n	80008a6 <main+0x1a>
 80008ac:	48000400 	.word	0x48000400

080008b0 <EXTI2_3_IRQHandler>:
	NVIC_EnableIRQ(EXTI2_3_IRQn); // ENABLE LINE 2 & LINE 3 INTERRUPT
}


void EXTI2_3_IRQHandler (void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	EXTI -> PR |= EXTI_PR_PR3; // EXIT INTERRUPT
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <EXTI2_3_IRQHandler+0x30>)
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <EXTI2_3_IRQHandler+0x30>)
 80008b8:	6952      	ldr	r2, [r2, #20]
 80008ba:	2108      	movs	r1, #8
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]

	// User Interrupt Service Routine Here
	GPIOB -> ODR = 0b01000011;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <EXTI2_3_IRQHandler+0x34>)
 80008c2:	2243      	movs	r2, #67	; 0x43
 80008c4:	615a      	str	r2, [r3, #20]
	delay(100000);
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <EXTI2_3_IRQHandler+0x38>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ffc5 	bl	8000858 <delay>
	GPIOB -> ODR = 0b0;
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <EXTI2_3_IRQHandler+0x34>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
	get_moving();
 80008d4:	f000 f8c0 	bl	8000a58 <get_moving>
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40010400 	.word	0x40010400
 80008e4:	48000400 	.word	0x48000400
 80008e8:	000186a0 	.word	0x000186a0

080008ec <init_GPIO>:

void init_GPIO(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;	//enable port a
 80008f0:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <init_GPIO+0xdc>)
 80008f2:	4a35      	ldr	r2, [pc, #212]	; (80009c8 <init_GPIO+0xdc>)
 80008f4:	6952      	ldr	r2, [r2, #20]
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	0289      	lsls	r1, r1, #10
 80008fa:	430a      	orrs	r2, r1
 80008fc:	615a      	str	r2, [r3, #20]
	RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;	//enable port b
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <init_GPIO+0xdc>)
 8000900:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <init_GPIO+0xdc>)
 8000902:	6952      	ldr	r2, [r2, #20]
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	02c9      	lsls	r1, r1, #11
 8000908:	430a      	orrs	r2, r1
 800090a:	615a      	str	r2, [r3, #20]

	//set pull-up resistors on ports A0-3
	//GPIOA->PUPDR |= 0b01010101;

	GPIOA -> MODER |=0; //set all switches to inputs
 800090c:	2390      	movs	r3, #144	; 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2290      	movs	r2, #144	; 0x90
 8000912:	05d2      	lsls	r2, r2, #23
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER1; //set PA1, analogue mode
 8000918:	2390      	movs	r3, #144	; 0x90
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2290      	movs	r2, #144	; 0x90
 800091e:	05d2      	lsls	r2, r2, #23
 8000920:	6812      	ldr	r2, [r2, #0]
 8000922:	210c      	movs	r1, #12
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER2; //set PA1, analogue mode
 8000928:	2390      	movs	r3, #144	; 0x90
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2290      	movs	r2, #144	; 0x90
 800092e:	05d2      	lsls	r2, r2, #23
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	2130      	movs	r1, #48	; 0x30
 8000934:	430a      	orrs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER3; //set PA3, analogue mode
 8000938:	2390      	movs	r3, #144	; 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2290      	movs	r2, #144	; 0x90
 800093e:	05d2      	lsls	r2, r2, #23
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	21c0      	movs	r1, #192	; 0xc0
 8000944:	430a      	orrs	r2, r1
 8000946:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER7; //set PA7, analogue mode
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2290      	movs	r2, #144	; 0x90
 800094e:	05d2      	lsls	r2, r2, #23
 8000950:	6812      	ldr	r2, [r2, #0]
 8000952:	21c0      	movs	r1, #192	; 0xc0
 8000954:	0209      	lsls	r1, r1, #8
 8000956:	430a      	orrs	r2, r1
 8000958:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER5; //set PA5, analogue mode
 800095a:	2390      	movs	r3, #144	; 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2290      	movs	r2, #144	; 0x90
 8000960:	05d2      	lsls	r2, r2, #23
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	21c0      	movs	r1, #192	; 0xc0
 8000966:	0109      	lsls	r1, r1, #4
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER6; //set PA6, analogue mode
 800096c:	2390      	movs	r3, #144	; 0x90
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	2290      	movs	r2, #144	; 0x90
 8000972:	05d2      	lsls	r2, r2, #23
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	21c0      	movs	r1, #192	; 0xc0
 8000978:	0189      	lsls	r1, r1, #6
 800097a:	430a      	orrs	r2, r1
 800097c:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER8; //set PA6, analogue mode
 800097e:	2390      	movs	r3, #144	; 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2290      	movs	r2, #144	; 0x90
 8000984:	05d2      	lsls	r2, r2, #23
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	21c0      	movs	r1, #192	; 0xc0
 800098a:	0289      	lsls	r1, r1, #10
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER10; //set PA6, analogue mode
 8000990:	2390      	movs	r3, #144	; 0x90
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2290      	movs	r2, #144	; 0x90
 8000996:	05d2      	lsls	r2, r2, #23
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	21c0      	movs	r1, #192	; 0xc0
 800099c:	0389      	lsls	r1, r1, #14
 800099e:	430a      	orrs	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]

	RCC  ->AHBENR |= RCC_AHBENR_GPIOBEN;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <init_GPIO+0xdc>)
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <init_GPIO+0xdc>)
 80009a6:	6952      	ldr	r2, [r2, #20]
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	02c9      	lsls	r1, r1, #11
 80009ac:	430a      	orrs	r2, r1
 80009ae:	615a      	str	r2, [r3, #20]
	GPIOB->MODER  |= (GPIO_MODER_MODER0_0 |
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <init_GPIO+0xe0>)
 80009b2:	4a06      	ldr	r2, [pc, #24]	; (80009cc <init_GPIO+0xe0>)
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	4906      	ldr	r1, [pc, #24]	; (80009d0 <init_GPIO+0xe4>)
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
						GPIO_MODER_MODER7_0|
						GPIO_MODER_MODER12_0|
						GPIO_MODER_MODER13_0|
						GPIO_MODER_MODER14_0|
						GPIO_MODER_MODER15_0);	//setting LEDs to output mode
	GPIOB->ODR = 0b0;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <init_GPIO+0xe0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400
 80009d0:	55005555 	.word	0x55005555

080009d4 <check_sensors>:
{
for(int i=0; i<1000; i++)
   for(int k=0; k<2000; k++);
}

void check_sensors(void){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	sensor1 = read_sensor(5);
 80009d8:	2005      	movs	r0, #5
 80009da:	f000 f999 	bl	8000d10 <read_sensor>
 80009de:	0003      	movs	r3, r0
 80009e0:	001a      	movs	r2, r3
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <check_sensors+0x68>)
 80009e4:	701a      	strb	r2, [r3, #0]
	sensor2 = read_sensor(6);
 80009e6:	2006      	movs	r0, #6
 80009e8:	f000 f992 	bl	8000d10 <read_sensor>
 80009ec:	0003      	movs	r3, r0
 80009ee:	001a      	movs	r2, r3
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <check_sensors+0x6c>)
 80009f2:	701a      	strb	r2, [r3, #0]
	sensor3 = read_sensor(2);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 f98b 	bl	8000d10 <read_sensor>
 80009fa:	0003      	movs	r3, r0
 80009fc:	001a      	movs	r2, r3
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <check_sensors+0x70>)
 8000a00:	701a      	strb	r2, [r3, #0]

	GPIOB -> ODR = sensor3;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <check_sensors+0x74>)
 8000a04:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <check_sensors+0x70>)
 8000a06:	7812      	ldrb	r2, [r2, #0]
 8000a08:	615a      	str	r2, [r3, #20]

	sprintf(stringVal, "%d V", sensor3);
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <check_sensors+0x70>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	001a      	movs	r2, r3
 8000a10:	490e      	ldr	r1, [pc, #56]	; (8000a4c <check_sensors+0x78>)
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <check_sensors+0x7c>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fb07 	bl	8001028 <siprintf>

	lcd_command(CURSOR_HOME);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f7ff fcea 	bl	80003f4 <lcd_command>
	lcd_putstring("Voltage: ");
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <check_sensors+0x80>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fecc 	bl	80007c0 <lcd_putstring>
	lcd_command(LINE_TWO);
 8000a28:	20c0      	movs	r0, #192	; 0xc0
 8000a2a:	f7ff fce3 	bl	80003f4 <lcd_command>
	lcd_putstring(stringVal);
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <check_sensors+0x7c>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fec5 	bl	80007c0 <lcd_putstring>
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000029 	.word	0x20000029
 8000a40:	2000002a 	.word	0x2000002a
 8000a44:	20000026 	.word	0x20000026
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	080010b8 	.word	0x080010b8
 8000a50:	2000001c 	.word	0x2000001c
 8000a54:	080010c0 	.word	0x080010c0

08000a58 <get_moving>:

void get_moving(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

		sensor1 = read_sensor(5);
 8000a5c:	2005      	movs	r0, #5
 8000a5e:	f000 f957 	bl	8000d10 <read_sensor>
 8000a62:	0003      	movs	r3, r0
 8000a64:	001a      	movs	r2, r3
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <get_moving+0xf8>)
 8000a68:	701a      	strb	r2, [r3, #0]
		sensor2 = read_sensor(6);
 8000a6a:	2006      	movs	r0, #6
 8000a6c:	f000 f950 	bl	8000d10 <read_sensor>
 8000a70:	0003      	movs	r3, r0
 8000a72:	001a      	movs	r2, r3
 8000a74:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <get_moving+0xfc>)
 8000a76:	701a      	strb	r2, [r3, #0]
		sensor3 = read_sensor(2);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f000 f949 	bl	8000d10 <read_sensor>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <get_moving+0x100>)
 8000a84:	701a      	strb	r2, [r3, #0]
		sensor4 = read_sensor(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f000 f942 	bl	8000d10 <read_sensor>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	001a      	movs	r2, r3
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <get_moving+0x104>)
 8000a92:	701a      	strb	r2, [r3, #0]
		sensor5 = read_sensor(8);
 8000a94:	2008      	movs	r0, #8
 8000a96:	f000 f93b 	bl	8000d10 <read_sensor>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <get_moving+0x108>)
 8000aa0:	701a      	strb	r2, [r3, #0]
			TIM2->CCR3 = 70*80;
			TIM2->CCR4 = 70*80;
			GPIOB -> ODR = 0b1001000001000000;
		}
		*/
		if(sensor1<2){
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <get_moving+0xf8>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d80d      	bhi.n	8000ac6 <get_moving+0x6e>
			//move forward
			TIM2->CCR3 = 70*80;
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	22af      	movs	r2, #175	; 0xaf
 8000ab0:	0152      	lsls	r2, r2, #5
 8000ab2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 70*80;
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	22af      	movs	r2, #175	; 0xaf
 8000aba:	0152      	lsls	r2, r2, #5
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b0101000001000000;
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <get_moving+0x10c>)
 8000ac0:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <get_moving+0x110>)
 8000ac2:	615a      	str	r2, [r3, #20]
		}
		else{
			GPIOB -> ODR = 0b0;
		}

}//end get moving function
 8000ac4:	e041      	b.n	8000b4a <get_moving+0xf2>
		else if(sensor2<2){
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <get_moving+0xfc>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d80d      	bhi.n	8000aea <get_moving+0x92>
			TIM2->CCR3 = 70*80;
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	22af      	movs	r2, #175	; 0xaf
 8000ad4:	0152      	lsls	r2, r2, #5
 8000ad6:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 50*80;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	22fa      	movs	r2, #250	; 0xfa
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b0101000001000000;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <get_moving+0x10c>)
 8000ae4:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <get_moving+0x110>)
 8000ae6:	615a      	str	r2, [r3, #20]
}//end get moving function
 8000ae8:	e02f      	b.n	8000b4a <get_moving+0xf2>
		}else if(sensor3<2){
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <get_moving+0x100>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d80d      	bhi.n	8000b0e <get_moving+0xb6>
			TIM2->CCR3 = 50*80;
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	22fa      	movs	r2, #250	; 0xfa
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 70*80;
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	22af      	movs	r2, #175	; 0xaf
 8000b02:	0152      	lsls	r2, r2, #5
 8000b04:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b0101000001000000;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <get_moving+0x10c>)
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <get_moving+0x110>)
 8000b0a:	615a      	str	r2, [r3, #20]
}//end get moving function
 8000b0c:	e01d      	b.n	8000b4a <get_moving+0xf2>
		}else if(sensor1>1 && sensor2>1 && sensor3>1){
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <get_moving+0xf8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d916      	bls.n	8000b44 <get_moving+0xec>
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <get_moving+0xfc>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d912      	bls.n	8000b44 <get_moving+0xec>
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <get_moving+0x100>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d90e      	bls.n	8000b44 <get_moving+0xec>
			TIM2->CCR3 = 70*80;
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	22af      	movs	r2, #175	; 0xaf
 8000b2c:	0152      	lsls	r2, r2, #5
 8000b2e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 70*80;
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	22af      	movs	r2, #175	; 0xaf
 8000b36:	0152      	lsls	r2, r2, #5
 8000b38:	641a      	str	r2, [r3, #64]	; 0x40
			GPIOB -> ODR = 0b1001000000000000;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <get_moving+0x10c>)
 8000b3c:	2290      	movs	r2, #144	; 0x90
 8000b3e:	0212      	lsls	r2, r2, #8
 8000b40:	615a      	str	r2, [r3, #20]
}//end get moving function
 8000b42:	e002      	b.n	8000b4a <get_moving+0xf2>
			GPIOB -> ODR = 0b0;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <get_moving+0x10c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
}//end get moving function
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000029 	.word	0x20000029
 8000b54:	2000002a 	.word	0x2000002a
 8000b58:	20000026 	.word	0x20000026
 8000b5c:	20000028 	.word	0x20000028
 8000b60:	20000027 	.word	0x20000027
 8000b64:	48000400 	.word	0x48000400
 8000b68:	00005040 	.word	0x00005040

08000b6c <init_ADC>:
void turn_left(void){
	//set motors to turn left
}

// Initialise ADC
void init_ADC(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//configure analogue pins for line sensors
	RCC -> APB2ENR |= RCC_APB2ENR_ADCEN; //enable clock for ADC
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <init_ADC+0x54>)
 8000b72:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <init_ADC+0x54>)
 8000b74:	6992      	ldr	r2, [r2, #24]
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0089      	lsls	r1, r1, #2
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	619a      	str	r2, [r3, #24]
	ADC1 -> CR &= ~(ADC_CR_ADSTART);		//stop adc if running
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <init_ADC+0x58>)
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <init_ADC+0x58>)
 8000b82:	6892      	ldr	r2, [r2, #8]
 8000b84:	2104      	movs	r1, #4
 8000b86:	438a      	bics	r2, r1
 8000b88:	609a      	str	r2, [r3, #8]

	ADC1 -> CFGR1 |= ADC_CFGR1_RES_1; //8 bit resolution
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <init_ADC+0x58>)
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <init_ADC+0x58>)
 8000b8e:	68d2      	ldr	r2, [r2, #12]
 8000b90:	2110      	movs	r1, #16
 8000b92:	430a      	orrs	r2, r1
 8000b94:	60da      	str	r2, [r3, #12]
	ADC1 -> CFGR1 &= ~ADC_CFGR1_ALIGN; //right align
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <init_ADC+0x58>)
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <init_ADC+0x58>)
 8000b9a:	68d2      	ldr	r2, [r2, #12]
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	60da      	str	r2, [r3, #12]
	ADC1 -> CFGR1 &= ~ADC_CFGR1_CONT; //single conversion mode
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <init_ADC+0x58>)
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <init_ADC+0x58>)
 8000ba6:	68d2      	ldr	r2, [r2, #12]
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <init_ADC+0x5c>)
 8000baa:	400a      	ands	r2, r1
 8000bac:	60da      	str	r2, [r3, #12]

	ADC1 -> CR |= ADC_CR_ADEN; //enable ADC
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <init_ADC+0x58>)
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <init_ADC+0x58>)
 8000bb2:	6892      	ldr	r2, [r2, #8]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	609a      	str	r2, [r3, #8]
	//while((ADC1->ISR & ADC_ISR_ADRDY) == 0); //exits loop when ADRDY == 1
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40012400 	.word	0x40012400
 8000bc8:	ffffdfff 	.word	0xffffdfff

08000bcc <sampleADC>:

//Triggers and ADC conversion and returns sampled ADC value:
uint8_t sampleADC(int channel){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	ADC1 -> CHSELR &= 0b0;	//disable channel
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <sampleADC+0x68>)
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <sampleADC+0x68>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1 -> CHSELR |= channel;	//select channel 5
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <sampleADC+0x68>)
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <sampleADC+0x68>)
 8000be2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1 -> CR |= ADC_CR_ADEN;				//set aden to 1 (on)
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <sampleADC+0x68>)
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <sampleADC+0x68>)
 8000bee:	6892      	ldr	r2, [r2, #8]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	609a      	str	r2, [r3, #8]
	while((ADC1 -> ISR & ADC_ISR_ADRDY) ==0);	//wait for RDY
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <sampleADC+0x68>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d0fa      	beq.n	8000bf8 <sampleADC+0x2c>

	ADC1 -> CR |= ADC_CR_ADSTART; //start ADC
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <sampleADC+0x68>)
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <sampleADC+0x68>)
 8000c06:	6892      	ldr	r2, [r2, #8]
 8000c08:	2104      	movs	r1, #4
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	609a      	str	r2, [r3, #8]
	while((ADC1 -> ISR & ADC_ISR_EOC) ==0); //wait for end of conversion
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <sampleADC+0x68>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2204      	movs	r2, #4
 8000c16:	4013      	ands	r3, r2
 8000c18:	d0fa      	beq.n	8000c10 <sampleADC+0x44>
	uint8_t ADCval = ADC1 -> DR; //get adc value
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <sampleADC+0x68>)
 8000c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	701a      	strb	r2, [r3, #0]
	return (ADCval);
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
	ADC1 -> CHSELR &= 0b0;	//disable channel
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b004      	add	sp, #16
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40012400 	.word	0x40012400

08000c38 <init_PWM>:

//Initialize PWM
void init_PWM(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000c3c:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <init_PWM+0xd0>)
 8000c3e:	4a32      	ldr	r2, [pc, #200]	; (8000d08 <init_PWM+0xd0>)
 8000c40:	69d2      	ldr	r2, [r2, #28]
 8000c42:	2101      	movs	r1, #1
 8000c44:	430a      	orrs	r2, r1
 8000c46:	61da      	str	r2, [r3, #28]
	RCC -> AHBENR |= RCC_AHBENR_GPIOBEN;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <init_PWM+0xd0>)
 8000c4a:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <init_PWM+0xd0>)
 8000c4c:	6952      	ldr	r2, [r2, #20]
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	02c9      	lsls	r1, r1, #11
 8000c52:	430a      	orrs	r2, r1
 8000c54:	615a      	str	r2, [r3, #20]
	//configure PB3 and PB10 to alternate function mode
	GPIOB->MODER |= GPIO_MODER_MODER10_1; // PB10 = AF LEFT INPUT 1
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <init_PWM+0xd4>)
 8000c58:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <init_PWM+0xd4>)
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0389      	lsls	r1, r1, #14
 8000c60:	430a      	orrs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER11_1; // PB11 = AF RIGHT INPUT 1
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <init_PWM+0xd4>)
 8000c66:	4a29      	ldr	r2, [pc, #164]	; (8000d0c <init_PWM+0xd4>)
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	0409      	lsls	r1, r1, #16
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[1] |=  (2 << (4*(10 - 8))); //map PB10 to TIM2 channel 3 using AF2 of AFRH
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <init_PWM+0xd4>)
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <init_PWM+0xd4>)
 8000c76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	0089      	lsls	r1, r1, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |=(2 << (4*(11 - 8))); //map PB11 to TIM2 channel 2 using AF2 of AFRL
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <init_PWM+0xd4>)
 8000c82:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <init_PWM+0xd4>)
 8000c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0189      	lsls	r1, r1, #6
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = 4000; // set ARR for approximately 1kHz PWM frequency
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	22fa      	movs	r2, #250	; 0xfa
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
	// set PWM mode 1 for both channels
	TIM2->CCMR2 |= (TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1); // PWM Mode 1 for PB10
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	05d2      	lsls	r2, r2, #23
 8000ca0:	69d2      	ldr	r2, [r2, #28]
 8000ca2:	2160      	movs	r1, #96	; 0x60
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= (TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1);  // PWM Mode 1 for PB11
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	05d2      	lsls	r2, r2, #23
 8000cb0:	69d2      	ldr	r2, [r2, #28]
 8000cb2:	21c0      	movs	r1, #192	; 0xc0
 8000cb4:	01c9      	lsls	r1, r1, #7
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	61da      	str	r2, [r3, #28]
	TIM2->CCR3 = 20 * 80; // Duty Cycle for PB10 = 20%
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	22c8      	movs	r2, #200	; 0xc8
 8000cc0:	00d2      	lsls	r2, r2, #3
 8000cc2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 90 * 80; // Duty Cycle for PB11 = 90%
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	22e1      	movs	r2, #225	; 0xe1
 8000cca:	0152      	lsls	r2, r2, #5
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
	// enable output compare on channels 2 and 3 of TIM2
	TIM2->CCER |= TIM_CCER_CC3E;//PB10
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	05d2      	lsls	r2, r2, #23
 8000cd6:	6a12      	ldr	r2, [r2, #32]
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= TIM_CCER_CC4E; //PB11
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	05d2      	lsls	r2, r2, #23
 8000ce8:	6a12      	ldr	r2, [r2, #32]
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	0149      	lsls	r1, r1, #5
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= TIM_CR1_CEN; //start TIM2
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	05d2      	lsls	r2, r2, #23
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
	}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000400 	.word	0x48000400

08000d10 <read_sensor>:

	//Takes in ADC channel to be converted (1,2,3,4,5,6). Corresponding channel is selected
	//and sampled. Sampled sensor value is returned. uint8_t return type is sufficient since
	//ADC is configured to 8 bit resolution
uint8_t read_sensor(int channel){
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

	int channel_bitmask;
	switch(channel){
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b0b      	cmp	r3, #11
 8000d1c:	d823      	bhi.n	8000d66 <read_sensor+0x56>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	009a      	lsls	r2, r3, #2
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <read_sensor+0x74>)
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	469f      	mov	pc, r3
		case 1:
			channel_bitmask = ADC_CHSELR_CHSEL1; // Channel 1 (mapped to f sensor)
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	60fb      	str	r3, [r7, #12]

			break;
 8000d2e:	e01a      	b.n	8000d66 <read_sensor+0x56>
		case 2:
			channel_bitmask = ADC_CHSELR_CHSEL2; // Channel 2 (mapped to mid_r sensor)
 8000d30:	2304      	movs	r3, #4
 8000d32:	60fb      	str	r3, [r7, #12]

			break;
 8000d34:	e017      	b.n	8000d66 <read_sensor+0x56>
		case 3:
			channel_bitmask = ADC_CHSELR_CHSEL3; // Channel 3 (mapped to mid_l sensor)
 8000d36:	2308      	movs	r3, #8
 8000d38:	60fb      	str	r3, [r7, #12]

			break;
 8000d3a:	e014      	b.n	8000d66 <read_sensor+0x56>
		case 5:
			channel_bitmask = ADC_CHSELR_CHSEL5; // Channel 5 (mapped to c_r sensor)
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	60fb      	str	r3, [r7, #12]

			break;
 8000d40:	e011      	b.n	8000d66 <read_sensor+0x56>
		case 6:
			channel_bitmask = ADC_CHSELR_CHSEL6; // Channel 6 (mapped to c_l sensor)
 8000d42:	2340      	movs	r3, #64	; 0x40
 8000d44:	60fb      	str	r3, [r7, #12]
			break;
 8000d46:	e00e      	b.n	8000d66 <read_sensor+0x56>
		case 7:
			channel_bitmask = ADC_CHSELR_CHSEL7; // Channel 7 (mapped to c_l sensor)
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	60fb      	str	r3, [r7, #12]
			break;
 8000d4c:	e00b      	b.n	8000d66 <read_sensor+0x56>
		case 8:
			channel_bitmask = ADC_CHSELR_CHSEL8; // Channel 8 (mapped to c_l sensor)
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
			break;
 8000d54:	e007      	b.n	8000d66 <read_sensor+0x56>
		case 10:
			channel_bitmask = ADC_CHSELR_CHSEL10; // Channel 8 (mapped to c_l sensor)
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
			break;
 8000d5c:	e003      	b.n	8000d66 <read_sensor+0x56>
		case 11:
			channel_bitmask = ADC_CHSELR_CHSEL11; // Channel 8 (mapped to c_l sensor)
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
			break;
 8000d64:	46c0      	nop			; (mov r8, r8)
}
	uint8_t val = (uint8_t)sampleADC(channel_bitmask);
 8000d66:	230b      	movs	r3, #11
 8000d68:	18fc      	adds	r4, r7, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ff2d 	bl	8000bcc <sampleADC>
 8000d72:	0003      	movs	r3, r0
 8000d74:	7023      	strb	r3, [r4, #0]
	return val;
 8000d76:	230b      	movs	r3, #11
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	781b      	ldrb	r3, [r3, #0]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b005      	add	sp, #20
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	080010cc 	.word	0x080010cc

08000d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d8e:	e003      	b.n	8000d98 <LoopCopyDataInit>

08000d90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d96:	3104      	adds	r1, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <LoopForever+0xe>)
  adds r2, r0, r1
 8000d9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000da0:	d3f6      	bcc.n	8000d90 <CopyDataInit>
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000da4:	e002      	b.n	8000dac <LoopFillZerobss>

08000da6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  str  r3, [r2]
 8000da8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000daa:	3204      	adds	r2, #4

08000dac <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <LoopForever+0x16>)
  cmp r2, r3
 8000dae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000db0:	d3f9      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000db2:	f000 f813 	bl	8000ddc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000db6:	f000 f94f 	bl	8001058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dba:	f7ff fd67 	bl	800088c <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000dc4:	08001104 	.word	0x08001104
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dcc:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 8000dd0:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 8000dd4:	2000002c 	.word	0x2000002c

08000dd8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_COMP_IRQHandler>
	...

08000ddc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <SystemInit+0x70>)
 8000de2:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <SystemInit+0x70>)
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	2101      	movs	r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <SystemInit+0x70>)
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <SystemInit+0x70>)
 8000df0:	6852      	ldr	r2, [r2, #4]
 8000df2:	4917      	ldr	r1, [pc, #92]	; (8000e50 <SystemInit+0x74>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <SystemInit+0x70>)
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <SystemInit+0x70>)
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	4915      	ldr	r1, [pc, #84]	; (8000e54 <SystemInit+0x78>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <SystemInit+0x70>)
 8000e06:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <SystemInit+0x70>)
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	4913      	ldr	r1, [pc, #76]	; (8000e58 <SystemInit+0x7c>)
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <SystemInit+0x70>)
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <SystemInit+0x70>)
 8000e14:	6852      	ldr	r2, [r2, #4]
 8000e16:	4911      	ldr	r1, [pc, #68]	; (8000e5c <SystemInit+0x80>)
 8000e18:	400a      	ands	r2, r1
 8000e1a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <SystemInit+0x70>)
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <SystemInit+0x70>)
 8000e20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e22:	210f      	movs	r1, #15
 8000e24:	438a      	bics	r2, r1
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SystemInit+0x70>)
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <SystemInit+0x70>)
 8000e2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e2e:	490c      	ldr	r1, [pc, #48]	; (8000e60 <SystemInit+0x84>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SystemInit+0x70>)
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x70>)
 8000e38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <SystemInit+0x70>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]

}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	f8ffb80c 	.word	0xf8ffb80c
 8000e54:	fef6ffff 	.word	0xfef6ffff
 8000e58:	fffbffff 	.word	0xfffbffff
 8000e5c:	ffc0ffff 	.word	0xffc0ffff
 8000e60:	fffffeac 	.word	0xfffffeac

08000e64 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000e74:	e003      	b.n	8000e7e <ts_itoa+0x1a>
		div *= base;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4353      	muls	r3, r2
 8000e7c:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	0019      	movs	r1, r3
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f7ff f940 	bl	8000108 <__udivsi3>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d2f1      	bcs.n	8000e76 <ts_itoa+0x12>

	while (div != 0)
 8000e92:	e02c      	b.n	8000eee <ts_itoa+0x8a>
	{
		int num = d/div;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	0019      	movs	r1, r3
 8000e98:	68b8      	ldr	r0, [r7, #8]
 8000e9a:	f7ff f935 	bl	8000108 <__udivsi3>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff f9b3 	bl	8000214 <__aeabi_uidivmod>
 8000eae:	000b      	movs	r3, r1
 8000eb0:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff f9b1 	bl	800021c <__divsi3>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	2b09      	cmp	r3, #9
 8000ec2:	dd0a      	ble.n	8000eda <ts_itoa+0x76>
			*((*buf)++) = (num-10) + 'A';
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	1c59      	adds	r1, r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	6011      	str	r1, [r2, #0]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	3237      	adds	r2, #55	; 0x37
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e009      	b.n	8000eee <ts_itoa+0x8a>
		else
			*((*buf)++) = num + '0';
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1c59      	adds	r1, r3, #1
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	6011      	str	r1, [r2, #0]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	3230      	adds	r2, #48	; 0x30
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1cf      	bne.n	8000e94 <ts_itoa+0x30>
	}
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b006      	add	sp, #24
 8000efa:	bd80      	pop	{r7, pc}

08000efc <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000f0c:	e07c      	b.n	8001008 <ts_formatstring+0x10c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b25      	cmp	r3, #37	; 0x25
 8000f14:	d000      	beq.n	8000f18 <ts_formatstring+0x1c>
 8000f16:	e06f      	b.n	8000ff8 <ts_formatstring+0xfc>
		{
			switch (*(++fmt))
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d01c      	beq.n	8000f60 <ts_formatstring+0x64>
 8000f26:	dc06      	bgt.n	8000f36 <ts_formatstring+0x3a>
 8000f28:	2b58      	cmp	r3, #88	; 0x58
 8000f2a:	d04f      	beq.n	8000fcc <ts_formatstring+0xd0>
 8000f2c:	2b63      	cmp	r3, #99	; 0x63
 8000f2e:	d00d      	beq.n	8000f4c <ts_formatstring+0x50>
 8000f30:	2b25      	cmp	r3, #37	; 0x25
 8000f32:	d057      	beq.n	8000fe4 <ts_formatstring+0xe8>
 8000f34:	e05c      	b.n	8000ff0 <ts_formatstring+0xf4>
 8000f36:	2b73      	cmp	r3, #115	; 0x73
 8000f38:	d02a      	beq.n	8000f90 <ts_formatstring+0x94>
 8000f3a:	dc02      	bgt.n	8000f42 <ts_formatstring+0x46>
 8000f3c:	2b69      	cmp	r3, #105	; 0x69
 8000f3e:	d00f      	beq.n	8000f60 <ts_formatstring+0x64>
 8000f40:	e056      	b.n	8000ff0 <ts_formatstring+0xf4>
 8000f42:	2b75      	cmp	r3, #117	; 0x75
 8000f44:	d037      	beq.n	8000fb6 <ts_formatstring+0xba>
 8000f46:	2b78      	cmp	r3, #120	; 0x78
 8000f48:	d040      	beq.n	8000fcc <ts_formatstring+0xd0>
 8000f4a:	e051      	b.n	8000ff0 <ts_formatstring+0xf4>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	1c53      	adds	r3, r2, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	1d19      	adds	r1, r3, #4
 8000f56:	6079      	str	r1, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	7013      	strb	r3, [r2, #0]
				break;
 8000f5e:	e047      	b.n	8000ff0 <ts_formatstring+0xf4>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1d1a      	adds	r2, r3, #4
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da07      	bge.n	8000f80 <ts_formatstring+0x84>
					{
						val *= -1;
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	425b      	negs	r3, r3
 8000f74:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	60fa      	str	r2, [r7, #12]
 8000f7c:	222d      	movs	r2, #45	; 0x2d
 8000f7e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000f80:	69f9      	ldr	r1, [r7, #28]
 8000f82:	230c      	movs	r3, #12
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	220a      	movs	r2, #10
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ff6b 	bl	8000e64 <ts_itoa>
				}
				break;
 8000f8e:	e02f      	b.n	8000ff0 <ts_formatstring+0xf4>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	1d1a      	adds	r2, r3, #4
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000f9a:	e007      	b.n	8000fac <ts_formatstring+0xb0>
					{
						*buf++ = *arg++;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60fa      	str	r2, [r7, #12]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	1c51      	adds	r1, r2, #1
 8000fa6:	61b9      	str	r1, [r7, #24]
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f3      	bne.n	8000f9c <ts_formatstring+0xa0>
					}
				}
				break;
 8000fb4:	e01c      	b.n	8000ff0 <ts_formatstring+0xf4>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	1d1a      	adds	r2, r3, #4
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff4d 	bl	8000e64 <ts_itoa>
				break;
 8000fca:	e011      	b.n	8000ff0 <ts_formatstring+0xf4>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2210      	movs	r2, #16
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff41 	bl	8000e64 <ts_itoa>
				break;
 8000fe2:	e005      	b.n	8000ff0 <ts_formatstring+0xf4>
			  case '%':
				  *buf++ = '%';
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60fa      	str	r2, [r7, #12]
 8000fea:	2225      	movs	r2, #37	; 0x25
 8000fec:	701a      	strb	r2, [r3, #0]
				  break;
 8000fee:	46c0      	nop			; (mov r8, r8)
			}
			fmt++;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e007      	b.n	8001008 <ts_formatstring+0x10c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60fa      	str	r2, [r7, #12]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	1c51      	adds	r1, r2, #1
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d000      	beq.n	8001012 <ts_formatstring+0x116>
 8001010:	e77d      	b.n	8000f0e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	001a      	movs	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	1ad3      	subs	r3, r2, r3
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b008      	add	sp, #32
 8001026:	bd80      	pop	{r7, pc}

08001028 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8001028:	b40e      	push	{r1, r2, r3}
 800102a:	b580      	push	{r7, lr}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001032:	2320      	movs	r3, #32
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	69f9      	ldr	r1, [r7, #28]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff5c 	bl	8000efc <ts_formatstring>
 8001044:	0003      	movs	r3, r0
 8001046:	60fb      	str	r3, [r7, #12]
	va_end(va);
	return length;
 8001048:	68fb      	ldr	r3, [r7, #12]
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b005      	add	sp, #20
 8001050:	bc80      	pop	{r7}
 8001052:	bc08      	pop	{r3}
 8001054:	b003      	add	sp, #12
 8001056:	4718      	bx	r3

08001058 <__libc_init_array>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	2600      	movs	r6, #0
 800105c:	4d0c      	ldr	r5, [pc, #48]	; (8001090 <__libc_init_array+0x38>)
 800105e:	4c0d      	ldr	r4, [pc, #52]	; (8001094 <__libc_init_array+0x3c>)
 8001060:	1b64      	subs	r4, r4, r5
 8001062:	10a4      	asrs	r4, r4, #2
 8001064:	42a6      	cmp	r6, r4
 8001066:	d109      	bne.n	800107c <__libc_init_array+0x24>
 8001068:	2600      	movs	r6, #0
 800106a:	f000 f819 	bl	80010a0 <_init>
 800106e:	4d0a      	ldr	r5, [pc, #40]	; (8001098 <__libc_init_array+0x40>)
 8001070:	4c0a      	ldr	r4, [pc, #40]	; (800109c <__libc_init_array+0x44>)
 8001072:	1b64      	subs	r4, r4, r5
 8001074:	10a4      	asrs	r4, r4, #2
 8001076:	42a6      	cmp	r6, r4
 8001078:	d105      	bne.n	8001086 <__libc_init_array+0x2e>
 800107a:	bd70      	pop	{r4, r5, r6, pc}
 800107c:	00b3      	lsls	r3, r6, #2
 800107e:	58eb      	ldr	r3, [r5, r3]
 8001080:	4798      	blx	r3
 8001082:	3601      	adds	r6, #1
 8001084:	e7ee      	b.n	8001064 <__libc_init_array+0xc>
 8001086:	00b3      	lsls	r3, r6, #2
 8001088:	58eb      	ldr	r3, [r5, r3]
 800108a:	4798      	blx	r3
 800108c:	3601      	adds	r6, #1
 800108e:	e7f2      	b.n	8001076 <__libc_init_array+0x1e>
 8001090:	080010fc 	.word	0x080010fc
 8001094:	080010fc 	.word	0x080010fc
 8001098:	080010fc 	.word	0x080010fc
 800109c:	08001100 	.word	0x08001100

080010a0 <_init>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr

080010ac <_fini>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr
